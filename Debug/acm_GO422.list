
acm_GO422.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006854  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006a24  08006a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa8  08006aa8  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ab0  08006ab0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ab4  08006ab4  00016ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08006ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aa4  20000100  08006bb8  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004ba4  08006bb8  00024ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ce4  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d6  00000000  00000000  00039e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0003d4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003e7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033b1  00000000  00000000  0003f970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015120  00000000  00000000  00042d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feada  00000000  00000000  00057e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015691b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e7c  00000000  00000000  00156970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000100 	.word	0x20000100
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006a0c 	.word	0x08006a0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000104 	.word	0x20000104
 800020c:	08006a0c 	.word	0x08006a0c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <init>:
Channel* channels[3] = {&data_channel_1, &data_channel_2, &data_channel_3};

// initialize GopherCAN
// What needs to happen on startup in order to run GopherCAN
Channel* init(CAN_HandleTypeDef* hcan_ptr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	acm_hcan = hcan_ptr;
 8000510:	4a2d      	ldr	r2, [pc, #180]	; (80005c8 <init+0xc0>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6013      	str	r3, [r2, #0]

	// initialize CAN
	// NOTE: CAN will also need to be added in CubeMX and code must be generated
	// Check the STM_CAN repo for the file "F0xx CAN Config Settings.pptx" for the correct settings
	if (init_can(acm_hcan, THIS_MODULE_ID, BXTYPE_MASTER))
 8000516:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <init+0xc0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2200      	movs	r2, #0
 800051c:	2107      	movs	r1, #7
 800051e:	4618      	mov	r0, r3
 8000520:	f001 f90a 	bl	8001738 <init_can>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d000      	beq.n	800052c <init+0x24>
	{
		// an error has occurred, stay here
		while (1);
 800052a:	e7fe      	b.n	800052a <init+0x22>
	}

	// enable updating for data channels
	DATA_CHANNEL_1.update_enabled = TRUE;
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <init+0xc4>)
 800052e:	2201      	movs	r2, #1
 8000530:	711a      	strb	r2, [r3, #4]
	DATA_CHANNEL_2.update_enabled = TRUE;
 8000532:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <init+0xc8>)
 8000534:	2201      	movs	r2, #1
 8000536:	711a      	strb	r2, [r3, #4]
	DATA_CHANNEL_3.update_enabled = TRUE;
 8000538:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <init+0xcc>)
 800053a:	2201      	movs	r2, #1
 800053c:	711a      	strb	r2, [r3, #4]

	//creating the channel structs for each data channel
	data_channel_1.high = DATA_CHANNEL_1_THRESHOLD_HIGH;
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <init+0xd0>)
 8000540:	f04f 0200 	mov.w	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
	data_channel_1.mid = DATA_CHANNEL_1_THRESHOLD_MID;
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <init+0xd0>)
 8000548:	f04f 0200 	mov.w	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
	data_channel_1.low = DATA_CHANNEL_1_THRESHOLD_LOW;
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <init+0xd0>)
 8000550:	f04f 0200 	mov.w	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
	data_channel_1.max = DATA_CHANNEL_1_MAX;
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <init+0xd0>)
 8000558:	f04f 0200 	mov.w	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
	data_channel_1.min = DATA_CHANNEL_1_MIN;
 800055e:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <init+0xd0>)
 8000560:	f04f 0200 	mov.w	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
	data_channel_2.high = DATA_CHANNEL_2_THRESHOLD_HIGH;
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <init+0xd4>)
 8000568:	f04f 0200 	mov.w	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
	data_channel_2.mid = DATA_CHANNEL_2_THRESHOLD_MID;
 800056e:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <init+0xd4>)
 8000570:	f04f 0200 	mov.w	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
	data_channel_2.low = DATA_CHANNEL_2_THRESHOLD_LOW;
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <init+0xd4>)
 8000578:	f04f 0200 	mov.w	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
	data_channel_2.max = DATA_CHANNEL_2_MAX;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <init+0xd4>)
 8000580:	f04f 0200 	mov.w	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
	data_channel_2.min = DATA_CHANNEL_2_MIN;
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <init+0xd4>)
 8000588:	f04f 0200 	mov.w	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
	data_channel_3.high = DATA_CHANNEL_3_THRESHOLD_HIGH;
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <init+0xd8>)
 8000590:	f04f 0200 	mov.w	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
	data_channel_3.mid = DATA_CHANNEL_3_THRESHOLD_MID;
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <init+0xd8>)
 8000598:	f04f 0200 	mov.w	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
	data_channel_3.low = DATA_CHANNEL_3_THRESHOLD_LOW;
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <init+0xd8>)
 80005a0:	f04f 0200 	mov.w	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
	data_channel_3.max = DATA_CHANNEL_3_MAX;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <init+0xd8>)
 80005a8:	f04f 0200 	mov.w	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
	data_channel_3.min = DATA_CHANNEL_3_MIN;
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <init+0xd8>)
 80005b0:	f04f 0200 	mov.w	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]

	// enable all of the variables in GopherCAN for testing
	set_all_params_state(TRUE);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f001 f96c 	bl	8001894 <set_all_params_state>
	return *channels;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <init+0xdc>)
 80005be:	681b      	ldr	r3, [r3, #0]
	// Set the function pointer of SET_LED_STATE. This means the function change_led_state()
	// will be run whenever this can command is sent to the module
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20004304 	.word	0x20004304
 80005cc:	20004adc 	.word	0x20004adc
 80005d0:	20004b7c 	.word	0x20004b7c
 80005d4:	20004ab8 	.word	0x20004ab8
 80005d8:	200042c4 	.word	0x200042c4
 80005dc:	200042f0 	.word	0x200042f0
 80005e0:	200042dc 	.word	0x200042dc
 80005e4:	2000001c 	.word	0x2000001c

080005e8 <valid_data_channel>:
	// handle the transmission hardware for each CAN bus
	service_can_tx_hardware(acm_hcan);
}

int valid_data_channel()
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
	int all_valid = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
	int i;
	for(i = 0; i < NUM_CHANNELS; i++) //need to figure out why these macros aren't transfering properly
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	e02f      	b.n	8000658 <valid_data_channel+0x70>
	{
		if(DATA_CHANNEL_1.data == data_channels[i]->data || DATA_CHANNEL_2.data == data_channels[i]->data || DATA_CHANNEL_3.data == data_channels[i]->data)
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <valid_data_channel+0x90>)
 80005fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80005fe:	4a1f      	ldr	r2, [pc, #124]	; (800067c <valid_data_channel+0x94>)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000606:	edd3 7a02 	vldr	s15, [r3, #8]
 800060a:	eeb4 7a67 	vcmp.f32	s14, s15
 800060e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000612:	d01b      	beq.n	800064c <valid_data_channel+0x64>
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <valid_data_channel+0x98>)
 8000616:	ed93 7a02 	vldr	s14, [r3, #8]
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <valid_data_channel+0x94>)
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000622:	edd3 7a02 	vldr	s15, [r3, #8]
 8000626:	eeb4 7a67 	vcmp.f32	s14, s15
 800062a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062e:	d00d      	beq.n	800064c <valid_data_channel+0x64>
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <valid_data_channel+0x9c>)
 8000632:	ed93 7a02 	vldr	s14, [r3, #8]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <valid_data_channel+0x94>)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000642:	eeb4 7a67 	vcmp.f32	s14, s15
 8000646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064a:	d102      	bne.n	8000652 <valid_data_channel+0x6a>
		{
			all_valid ++;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
	for(i = 0; i < NUM_CHANNELS; i++) //need to figure out why these macros aren't transfering properly
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2b04      	cmp	r3, #4
 800065c:	ddcc      	ble.n	80005f8 <valid_data_channel+0x10>
		}
	}
	if(all_valid == 3)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d101      	bne.n	8000668 <valid_data_channel+0x80>
	{
		return 0;
 8000664:	2300      	movs	r3, #0
 8000666:	e000      	b.n	800066a <valid_data_channel+0x82>
	}
	return 1; // not valid
 8000668:	2301      	movs	r3, #1
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20004adc 	.word	0x20004adc
 800067c:	20000000 	.word	0x20000000
 8000680:	20004b7c 	.word	0x20004b7c
 8000684:	20004ab8 	.word	0x20004ab8

08000688 <calculate_rear_wing_angle>:
// main_loop: function to have module run constantly while turned on

// function to be called in the main() function to determine which state the rear wing should be
// at based on the data requested
int calculate_rear_wing_angle(FLOAT_CAN_STRUCT* data_channel, Channel channel)
{
 8000688:	b084      	sub	sp, #16
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	f107 0014 	add.w	r0, r7, #20
 8000696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// TO COMPLETE
	// pretty sure this is just gonna be a sad series of if statements unless someone has a more
	// elegant idea
	if(data_channel->data > channel.max || data_channel->data < channel.min)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	ed93 7a02 	vldr	s14, [r3, #8]
 80006a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80006a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ac:	dc09      	bgt.n	80006c2 <calculate_rear_wing_angle+0x3a>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80006b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80006b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c0:	d502      	bpl.n	80006c8 <calculate_rear_wing_angle+0x40>
	{
		return err_drs;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <calculate_rear_wing_angle+0xa0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	e028      	b.n	800071a <calculate_rear_wing_angle+0x92>
	}
	if(data_channel->data > channel.high)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80006ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80006d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006da:	dd02      	ble.n	80006e2 <calculate_rear_wing_angle+0x5a>
	{
		return high_rear_angle;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <calculate_rear_wing_angle+0xa4>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	e01b      	b.n	800071a <calculate_rear_wing_angle+0x92>
	}
	else if(data_channel->data > channel.mid)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80006e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80006ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f4:	dd02      	ble.n	80006fc <calculate_rear_wing_angle+0x74>
	{
		return mid_high_rear_angle;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <calculate_rear_wing_angle+0xa8>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	e00e      	b.n	800071a <calculate_rear_wing_angle+0x92>
	}
	else if(data_channel->data > channel.low)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8000702:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800070a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070e:	dd02      	ble.n	8000716 <calculate_rear_wing_angle+0x8e>
	{
		return mid_low_rear_angle;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <calculate_rear_wing_angle+0xac>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	e001      	b.n	800071a <calculate_rear_wing_angle+0x92>
	}
	else
	{
		return low_rear_angle;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <calculate_rear_wing_angle+0xb0>)
 8000718:	781b      	ldrb	r3, [r3, #0]
	}
	// currently do not know how I want to implement more than one data channel
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr
 8000728:	20000017 	.word	0x20000017
 800072c:	20000014 	.word	0x20000014
 8000730:	20000015 	.word	0x20000015
 8000734:	20000016 	.word	0x20000016
 8000738:	2000011c 	.word	0x2000011c

0800073c <calculate_front_wing_angle>:

// function to be called in the main() function to determine which state the front wing should be
// at based on the data requested
int calculate_front_wing_angle(FLOAT_CAN_STRUCT* data_channel, Channel channel)
{
 800073c:	b084      	sub	sp, #16
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	f107 0014 	add.w	r0, r7, #20
 800074a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(data_channel->data > channel.max || data_channel->data < channel.min)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	ed93 7a02 	vldr	s14, [r3, #8]
 8000754:	edd7 7a05 	vldr	s15, [r7, #20]
 8000758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000760:	dc09      	bgt.n	8000776 <calculate_front_wing_angle+0x3a>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	ed93 7a02 	vldr	s14, [r3, #8]
 8000768:	edd7 7a06 	vldr	s15, [r7, #24]
 800076c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000774:	d502      	bpl.n	800077c <calculate_front_wing_angle+0x40>
	{
		return err_drs;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <calculate_front_wing_angle+0xa0>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	e028      	b.n	80007ce <calculate_front_wing_angle+0x92>
	}
	else if(data_channel->data > channel.high)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000782:	edd7 7a07 	vldr	s15, [r7, #28]
 8000786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800078a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078e:	dd02      	ble.n	8000796 <calculate_front_wing_angle+0x5a>
	{
		return high_rear_angle;
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <calculate_front_wing_angle+0xa4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	e01b      	b.n	80007ce <calculate_front_wing_angle+0x92>
	}
	else if(data_channel->data > channel.mid)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	ed93 7a02 	vldr	s14, [r3, #8]
 800079c:	edd7 7a08 	vldr	s15, [r7, #32]
 80007a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a8:	dd02      	ble.n	80007b0 <calculate_front_wing_angle+0x74>
	{
		return mid_high_rear_angle;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <calculate_front_wing_angle+0xa8>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	e00e      	b.n	80007ce <calculate_front_wing_angle+0x92>
	}
	else if(data_channel->data > channel.low)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80007b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80007ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c2:	dd02      	ble.n	80007ca <calculate_front_wing_angle+0x8e>
	{
		return mid_low_rear_angle;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <calculate_front_wing_angle+0xac>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	e001      	b.n	80007ce <calculate_front_wing_angle+0x92>
	}
	else
	{
		return low_rear_angle;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <calculate_front_wing_angle+0xb0>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
	}
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	b004      	add	sp, #16
 80007da:	4770      	bx	lr
 80007dc:	20000017 	.word	0x20000017
 80007e0:	20000014 	.word	0x20000014
 80007e4:	20000015 	.word	0x20000015
 80007e8:	20000016 	.word	0x20000016
 80007ec:	2000011c 	.word	0x2000011c

080007f0 <determine_rear_angle>:
int determine_rear_angle(int rear_angles[])
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	int high = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < USED_CHANNELS; i++)
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	e010      	b.n	8000824 <determine_rear_angle+0x34>
	{
		if(rear_angles[i] > high)
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	429a      	cmp	r2, r3
 8000810:	da05      	bge.n	800081e <determine_rear_angle+0x2e>
		{
			high = rear_angles[i];
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < USED_CHANNELS; i++)
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	3301      	adds	r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b02      	cmp	r3, #2
 8000828:	ddeb      	ble.n	8000802 <determine_rear_angle+0x12>
		}
	}
	return high;
 800082a:	68fb      	ldr	r3, [r7, #12]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <determine_front_angle>:
int determine_front_angle(int front_angles[])
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	int high = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < USED_CHANNELS; i++)
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	e010      	b.n	800086c <determine_front_angle+0x34>
	{
		if(front_angles[i] > high)
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	429a      	cmp	r2, r3
 8000858:	da05      	bge.n	8000866 <determine_front_angle+0x2e>
		{
			high = front_angles[i];
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < USED_CHANNELS; i++)
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	3301      	adds	r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	2b02      	cmp	r3, #2
 8000870:	ddeb      	ble.n	800084a <determine_front_angle+0x12>
		}
	}
	return high;
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <parameter_request>:

// manual control of DRS, switch from high to low position when driver presses button
void on_button_press(void); // need to add a pin for input capture, will set the state to high downforce
// parameter request function for channel 1
void parameter_request(FLOAT_CAN_STRUCT* data_channel)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick() - DATA_CHANNEL_1.last_rx >= UPDATE_TIME) // update every 50Hz
 8000888:	f001 fb34 	bl	8001ef4 <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <parameter_request+0x38>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	2b13      	cmp	r3, #19
 8000896:	d90a      	bls.n	80008ae <parameter_request+0x2e>
	{
		// don't send another data request if the request is already pending
		// A timeout may also be worth including just in case something goes wrong
		if(DATA_CHANNEL_1.pending_response == FALSE)
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <parameter_request+0x38>)
 800089a:	795b      	ldrb	r3, [r3, #5]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d106      	bne.n	80008ae <parameter_request+0x2e>
		{
			request_parameter(PRIO_HIGH, OTHER_MODULE, DATA_CHANNEL_1.param_id);
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <parameter_request+0x38>)
 80008a2:	799b      	ldrb	r3, [r3, #6]
 80008a4:	461a      	mov	r2, r3
 80008a6:	2101      	movs	r1, #1
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 f85d 	bl	8001968 <request_parameter>
		}
		//data_channel_1.data = DATA_CHANNEL_1.data;
	}
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20004adc 	.word	0x20004adc

080008bc <PWM_generation>:

// function to convert angle to PWM
void PWM_generation(int drs_state, int active_aero_state)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	if(active_aero_state == high_front_angle)
 80008c6:	4b3c      	ldr	r3, [pc, #240]	; (80009b8 <PWM_generation+0xfc>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d10a      	bne.n	80008e8 <PWM_generation+0x2c>
	{
		//front wing left (stall at 1500)
		TIM2->CCR1 = 1833;
 80008d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008d6:	f240 7229 	movw	r2, #1833	; 0x729
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
		//front wing right (stall at 1500)
		TIM2->CCR2 = 1833;
 80008dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e0:	f240 7229 	movw	r2, #1833	; 0x729
 80008e4:	639a      	str	r2, [r3, #56]	; 0x38
 80008e6:	e031      	b.n	800094c <PWM_generation+0x90>
	}
	else if(active_aero_state == mid_high_front_angle)
 80008e8:	4b34      	ldr	r3, [pc, #208]	; (80009bc <PWM_generation+0x100>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d10a      	bne.n	800090a <PWM_generation+0x4e>
	{
		TIM2->CCR1 = 1722; //left
 80008f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008f8:	f240 62ba 	movw	r2, #1722	; 0x6ba
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 1722; //right
 80008fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000902:	f240 62ba 	movw	r2, #1722	; 0x6ba
 8000906:	639a      	str	r2, [r3, #56]	; 0x38
 8000908:	e020      	b.n	800094c <PWM_generation+0x90>
	}
	else if(active_aero_state == mid_low_front_angle)
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <PWM_generation+0x104>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	4293      	cmp	r3, r2
 8000914:	d10a      	bne.n	800092c <PWM_generation+0x70>
	{
		TIM2->CCR1 = 1611; //left
 8000916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800091a:	f240 624b 	movw	r2, #1611	; 0x64b
 800091e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 1611; //right
 8000920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000924:	f240 624b 	movw	r2, #1611	; 0x64b
 8000928:	639a      	str	r2, [r3, #56]	; 0x38
 800092a:	e00f      	b.n	800094c <PWM_generation+0x90>
	}
	else if(active_aero_state == low_front_angle)
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <PWM_generation+0x108>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	4293      	cmp	r3, r2
 8000936:	d109      	bne.n	800094c <PWM_generation+0x90>
	{
		TIM2->CCR1 = 1500; //left
 8000938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800093c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 1500; //right
 8000942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000946:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800094a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	// drs angles
	if(drs_state == high_rear_angle)
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <PWM_generation+0x10c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4293      	cmp	r3, r2
 8000956:	d105      	bne.n	8000964 <PWM_generation+0xa8>
	{
		TIM2->CCR3 = 2067; //drs
 8000958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800095c:	f640 0213 	movw	r2, #2067	; 0x813
 8000960:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	else if(drs_state == low_rear_angle)
	{
		TIM2->CCR3 = 1500; //drs
	}
}
 8000962:	e022      	b.n	80009aa <PWM_generation+0xee>
	else if(drs_state == mid_high_rear_angle)
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <PWM_generation+0x110>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4293      	cmp	r3, r2
 800096e:	d105      	bne.n	800097c <PWM_generation+0xc0>
		TIM2->CCR3 = 1878; //drs
 8000970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000974:	f240 7256 	movw	r2, #1878	; 0x756
 8000978:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800097a:	e016      	b.n	80009aa <PWM_generation+0xee>
	else if(drs_state == mid_low_rear_angle)
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <PWM_generation+0x114>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4293      	cmp	r3, r2
 8000986:	d105      	bne.n	8000994 <PWM_generation+0xd8>
		TIM2->CCR3 = 1689; //drs
 8000988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800098c:	f240 6299 	movw	r2, #1689	; 0x699
 8000990:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000992:	e00a      	b.n	80009aa <PWM_generation+0xee>
	else if(drs_state == low_rear_angle)
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <PWM_generation+0x118>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4293      	cmp	r3, r2
 800099e:	d104      	bne.n	80009aa <PWM_generation+0xee>
		TIM2->CCR3 = 1500; //drs
 80009a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000018 	.word	0x20000018
 80009bc:	20000019 	.word	0x20000019
 80009c0:	2000001a 	.word	0x2000001a
 80009c4:	2000011d 	.word	0x2000011d
 80009c8:	20000014 	.word	0x20000014
 80009cc:	20000015 	.word	0x20000015
 80009d0:	20000016 	.word	0x20000016
 80009d4:	2000011c 	.word	0x2000011c

080009d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <vApplicationGetIdleTaskMemory+0x2c>)
 80009e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <vApplicationGetIdleTaskMemory+0x30>)
 80009ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000120 	.word	0x20000120
 8000a08:	20000174 	.word	0x20000174

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	b08e      	sub	sp, #56	; 0x38
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f001 fa4e 	bl	8001eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 f83b 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1a:	f000 fab7 	bl	8000f8c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000a1e:	f000 f947 	bl	8000cb0 <MX_CAN1_Init>
  MX_TIM8_Init();
 8000a22:	f000 fa07 	bl	8000e34 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000a26:	f000 f89f 	bl	8000b68 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000a2a:	f000 f8ef 	bl	8000c0c <MX_ADC3_Init>
  MX_TIM2_Init();
 8000a2e:	f000 f975 	bl	8000d1c <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskMain_Loop */
  osThreadDef(taskMain_Loop, task_main_loop, osPriorityNormal, 0, 256);
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <main+0x74>)
 8000a34:	f107 041c 	add.w	r4, r7, #28
 8000a38:	461d      	mov	r5, r3
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskMain_LoopHandle = osThreadCreate(osThread(taskMain_Loop), NULL);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f004 fd8e 	bl	800556e <osThreadCreate>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <main+0x78>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskGCAN_Hardwa */
  osThreadDef(taskGCAN_Hardwa, task_gcan_hw, osPriorityNormal, 0, 256);
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <main+0x7c>)
 8000a5a:	463c      	mov	r4, r7
 8000a5c:	461d      	mov	r5, r3
 8000a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskGCAN_HardwaHandle = osThreadCreate(osThread(taskGCAN_Hardwa), NULL);
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 fd7d 	bl	800556e <osThreadCreate>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <main+0x80>)
 8000a78:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a7a:	f004 fd71 	bl	8005560 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <main+0x72>
 8000a80:	08006a44 	.word	0x08006a44
 8000a84:	20004364 	.word	0x20004364
 8000a88:	08006a60 	.word	0x08006a60
 8000a8c:	20004360 	.word	0x20004360

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	; 0x50
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	2230      	movs	r2, #48	; 0x30
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 ffac 	bl	80069fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <SystemClock_Config+0xd0>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a29      	ldr	r2, [pc, #164]	; (8000b60 <SystemClock_Config+0xd0>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <SystemClock_Config+0xd0>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <SystemClock_Config+0xd4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <SystemClock_Config+0xd4>)
 8000ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <SystemClock_Config+0xd4>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aee:	2302      	movs	r3, #2
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000af8:	230c      	movs	r3, #12
 8000afa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000afc:	23c8      	movs	r3, #200	; 0xc8
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fe45 	bl	800379c <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b18:	f000 fb82 	bl	8001220 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b1c:	f002 fdee 	bl	80036fc <HAL_PWREx_EnableOverDrive>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b26:	f000 fb7b 	bl	8001220 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	2106      	movs	r1, #6
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 f8cb 	bl	8003ce4 <HAL_RCC_ClockConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b54:	f000 fb64 	bl	8001220 <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3750      	adds	r7, #80	; 0x50
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b7c:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <MX_ADC1_Init+0xa0>)
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bca:	f001 f9c7 	bl	8001f5c <HAL_ADC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bd4:	f000 fb24 	bl	8001220 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000bd8:	2306      	movs	r3, #6
 8000bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bea:	f001 f9fb 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bf4:	f000 fb14 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20004368 	.word	0x20004368
 8000c04:	40012000 	.word	0x40012000
 8000c08:	0f000001 	.word	0x0f000001

08000c0c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c12:	463b      	mov	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c20:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <MX_ADC3_Init+0x9c>)
 8000c22:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c2a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <MX_ADC3_Init+0xa0>)
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c6e:	f001 f975 	bl	8001f5c <HAL_ADC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c78:	f000 fad2 	bl	8001220 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_ADC3_Init+0x98>)
 8000c8e:	f001 f9a9 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c98:	f000 fac2 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200043b0 	.word	0x200043b0
 8000ca8:	40012200 	.word	0x40012200
 8000cac:	0f000001 	.word	0x0f000001

08000cb0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000cb6:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <MX_CAN1_Init+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000cd0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000cd4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_CAN1_Init+0x64>)
 8000d02:	f001 fbb3 	bl	800246c <HAL_CAN_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d0c:	f000 fa88 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20004444 	.word	0x20004444
 8000d18:	40006400 	.word	0x40006400

08000d1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d4e:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000d50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d62:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b31      	ldr	r3, [pc, #196]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d76:	482e      	ldr	r0, [pc, #184]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000d78:	f003 f9a8 	bl	80040cc <HAL_TIM_Base_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d82:	f000 fa4d 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4827      	ldr	r0, [pc, #156]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000d94:	f003 fdf6 	bl	8004984 <HAL_TIM_ConfigClockSource>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d9e:	f000 fa3f 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000da2:	4823      	ldr	r0, [pc, #140]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000da4:	f003 fa62 	bl	800426c <HAL_TIM_PWM_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000dae:	f000 fa37 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	481b      	ldr	r0, [pc, #108]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000dc2:	f004 fa8b 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000dcc:	f000 fa28 	bl	8001220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd0:	2360      	movs	r3, #96	; 0x60
 8000dd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	4619      	mov	r1, r3
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000de8:	f003 fcbc 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000df2:	f000 fa15 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	2204      	movs	r2, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000dfe:	f003 fcb1 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000e08:	f000 fa0a 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2208      	movs	r2, #8
 8000e10:	4619      	mov	r1, r3
 8000e12:	4807      	ldr	r0, [pc, #28]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000e14:	f003 fca6 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000e1e:	f000 f9ff 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e22:	4803      	ldr	r0, [pc, #12]	; (8000e30 <MX_TIM2_Init+0x114>)
 8000e24:	f000 fb5a 	bl	80014dc <HAL_TIM_MspPostInit>

}
 8000e28:	bf00      	nop
 8000e2a:	3738      	adds	r7, #56	; 0x38
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200043f8 	.word	0x200043f8

08000e34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b09a      	sub	sp, #104	; 0x68
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	222c      	movs	r2, #44	; 0x2c
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f005 fdc4 	bl	80069fc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e74:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000e76:	4a44      	ldr	r2, [pc, #272]	; (8000f88 <MX_TIM8_Init+0x154>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e7a:	4b42      	ldr	r3, [pc, #264]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b40      	ldr	r3, [pc, #256]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e86:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e94:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b3a      	ldr	r3, [pc, #232]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ea0:	4838      	ldr	r0, [pc, #224]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000ea2:	f003 f913 	bl	80040cc <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f000 f9b8 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000eb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4831      	ldr	r0, [pc, #196]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000ebe:	f003 fd61 	bl	8004984 <HAL_TIM_ConfigClockSource>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000ec8:	f000 f9aa 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000ecc:	482d      	ldr	r0, [pc, #180]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000ece:	f003 f9cd 	bl	800426c <HAL_TIM_PWM_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000ed8:	f000 f9a2 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ee8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eec:	4619      	mov	r1, r3
 8000eee:	4825      	ldr	r0, [pc, #148]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000ef0:	f004 f9f4 	bl	80052dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000efa:	f000 f991 	bl	8001220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000efe:	2360      	movs	r3, #96	; 0x60
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f06:	2300      	movs	r3, #0
 8000f08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	4818      	ldr	r0, [pc, #96]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000f24:	f003 fc1e 	bl	8004764 <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000f2e:	f000 f977 	bl	8001220 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000f68:	f004 fa46 	bl	80053f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000f72:	f000 f955 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f76:	4803      	ldr	r0, [pc, #12]	; (8000f84 <MX_TIM8_Init+0x150>)
 8000f78:	f000 fab0 	bl	80014dc <HAL_TIM_MspPostInit>

}
 8000f7c:	bf00      	nop
 8000f7e:	3768      	adds	r7, #104	; 0x68
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20004314 	.word	0x20004314
 8000f88:	40010400 	.word	0x40010400

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fa2:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a42      	ldr	r2, [pc, #264]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000fa8:	f043 0320 	orr.w	r3, r3, #32
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0320 	and.w	r3, r3, #32
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a3c      	ldr	r2, [pc, #240]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a36      	ldr	r2, [pc, #216]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a30      	ldr	r2, [pc, #192]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <MX_GPIO_Init+0x124>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <MX_GPIO_Init+0x124>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a2a      	ldr	r2, [pc, #168]	; (80010b0 <MX_GPIO_Init+0x124>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <MX_GPIO_Init+0x124>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RIGHT_ENABLE_Pin|LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001020:	4824      	ldr	r0, [pc, #144]	; (80010b4 <MX_GPIO_Init+0x128>)
 8001022:	f002 fb51 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRS2_EN_Pin|DRS1_EN_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2130      	movs	r1, #48	; 0x30
 800102a:	4823      	ldr	r0, [pc, #140]	; (80010b8 <MX_GPIO_Init+0x12c>)
 800102c:	f002 fb4c 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_2_GPIO_Port, STATUS_2_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2104      	movs	r1, #4
 8001034:	4821      	ldr	r0, [pc, #132]	; (80010bc <MX_GPIO_Init+0x130>)
 8001036:	f002 fb47 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_ENABLE_Pin LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENABLE_Pin|LEFT_ENABLE_Pin;
 800103a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4818      	ldr	r0, [pc, #96]	; (80010b4 <MX_GPIO_Init+0x128>)
 8001054:	f002 f98c 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRS2_EN_Pin DRS1_EN_Pin */
  GPIO_InitStruct.Pin = DRS2_EN_Pin|DRS1_EN_Pin;
 8001058:	2330      	movs	r3, #48	; 0x30
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <MX_GPIO_Init+0x12c>)
 8001070:	f002 f97e 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_1_Pin */
  GPIO_InitStruct.Pin = STATUS_1_Pin;
 8001074:	2302      	movs	r3, #2
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001078:	2303      	movs	r3, #3
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATUS_1_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_GPIO_Init+0x130>)
 8001088:	f002 f972 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_2_Pin */
  GPIO_InitStruct.Pin = STATUS_2_Pin;
 800108c:	2304      	movs	r3, #4
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_2_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_GPIO_Init+0x130>)
 80010a4:	f002 f964 	bl	8003370 <HAL_GPIO_Init>

}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40021400 	.word	0x40021400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020400 	.word	0x40020400

080010c0 <task_main_loop>:

/* USER CODE END Header_task_main_loop */
Channel* channel_structs[USED_CHANNELS];

void task_main_loop(void const * argument)
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b092      	sub	sp, #72	; 0x48
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  TIM2->CCR1 = 1500; //stall setting, current default for high downforce for this current iteration
 80010c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010cc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = 1500;
 80010d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010da:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM2->CCR3 = 1500;
 80010dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010e4:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80010e6:	2104      	movs	r1, #4
 80010e8:	483c      	ldr	r0, [pc, #240]	; (80011dc <task_main_loop+0x11c>)
 80010ea:	f003 f921 	bl	8004330 <HAL_TIM_PWM_Start>
	  *channel_structs = init(&hcan1);
 80010ee:	483c      	ldr	r0, [pc, #240]	; (80011e0 <task_main_loop+0x120>)
 80010f0:	f7ff fa0a 	bl	8000508 <init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a3b      	ldr	r2, [pc, #236]	; (80011e4 <task_main_loop+0x124>)
 80010f8:	6013      	str	r3, [r2, #0]
	  FLOAT_CAN_STRUCT* channels[USED_CHANNELS] = {&DATA_CHANNEL_1, &DATA_CHANNEL_2, &DATA_CHANNEL_3};
 80010fa:	4a3b      	ldr	r2, [pc, #236]	; (80011e8 <task_main_loop+0x128>)
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	ca07      	ldmia	r2, {r0, r1, r2}
 8001102:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  int valid = valid_data_channel();
 8001106:	f7ff fa6f 	bl	80005e8 <valid_data_channel>
 800110a:	63b8      	str	r0, [r7, #56]	; 0x38
  /* Infinite loop */
	  while(valid == 0)
 800110c:	e05e      	b.n	80011cc <task_main_loop+0x10c>
	  {
		  int rear[3];
		  int front[3];
		  for(int i = 0; i < USED_CHANNELS; i++)
 800110e:	2300      	movs	r3, #0
 8001110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001112:	e048      	b.n	80011a6 <task_main_loop+0xe6>
		  {
			  parameter_request(channels[i]);
 8001114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800111c:	4413      	add	r3, r2
 800111e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fbac 	bl	8000880 <parameter_request>
			  rear[i] = calculate_rear_wing_angle(channels[i], *channel_structs[i]);
 8001128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001130:	4413      	add	r3, r2
 8001132:	f853 4c1c 	ldr.w	r4, [r3, #-28]
 8001136:	4a2b      	ldr	r2, [pc, #172]	; (80011e4 <task_main_loop+0x124>)
 8001138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	466d      	mov	r5, sp
 8001140:	f103 020c 	add.w	r2, r3, #12
 8001144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001148:	e885 0003 	stmia.w	r5, {r0, r1}
 800114c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800114e:	4620      	mov	r0, r4
 8001150:	f7ff fa9a 	bl	8000688 <calculate_rear_wing_angle>
 8001154:	4602      	mov	r2, r0
 8001156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800115e:	440b      	add	r3, r1
 8001160:	f843 2c28 	str.w	r2, [r3, #-40]
			  front[i] = calculate_front_wing_angle(channels[i], *channel_structs[i]);
 8001164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800116c:	4413      	add	r3, r2
 800116e:	f853 4c1c 	ldr.w	r4, [r3, #-28]
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <task_main_loop+0x124>)
 8001174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	466d      	mov	r5, sp
 800117c:	f103 020c 	add.w	r2, r3, #12
 8001180:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001184:	e885 0003 	stmia.w	r5, {r0, r1}
 8001188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff fad6 	bl	800073c <calculate_front_wing_angle>
 8001190:	4602      	mov	r2, r0
 8001192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800119a:	440b      	add	r3, r1
 800119c:	f843 2c34 	str.w	r2, [r3, #-52]
		  for(int i = 0; i < USED_CHANNELS; i++)
 80011a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a2:	3301      	adds	r3, #1
 80011a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	ddb3      	ble.n	8001114 <task_main_loop+0x54>
		  }
		  int active_aero_state = determine_front_angle(rear);
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fb41 	bl	8000838 <determine_front_angle>
 80011b6:	6378      	str	r0, [r7, #52]	; 0x34
		  int drs_state = determine_rear_angle(rear);
 80011b8:	f107 0318 	add.w	r3, r7, #24
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fb17 	bl	80007f0 <determine_rear_angle>
 80011c2:	6338      	str	r0, [r7, #48]	; 0x30
		  PWM_generation(drs_state, active_aero_state);
 80011c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011c8:	f7ff fb78 	bl	80008bc <PWM_generation>
	  while(valid == 0)
 80011cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d09d      	beq.n	800110e <task_main_loop+0x4e>
	  }
  /* USER CODE END 5 */
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3740      	adds	r7, #64	; 0x40
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	200043f8 	.word	0x200043f8
 80011e0:	20004444 	.word	0x20004444
 80011e4:	20004308 	.word	0x20004308
 80011e8:	08006a7c 	.word	0x08006a7c

080011ec <task_gcan_hw>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_gcan_hw */
void task_gcan_hw(void const * argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_gcan_hw */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f004 fa06 	bl	8005606 <osDelay>
 80011fa:	e7fb      	b.n	80011f4 <task_gcan_hw+0x8>

080011fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800120e:	f000 fe5d 	bl	8001ecc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40001000 	.word	0x40001000

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <HAL_MspInit+0x4c>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <HAL_MspInit+0x4c>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	210f      	movs	r1, #15
 8001266:	f06f 0001 	mvn.w	r0, #1
 800126a:	f002 f857 	bl	800331c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a42      	ldr	r2, [pc, #264]	; (80013a4 <HAL_ADC_MspInit+0x128>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d154      	bne.n	8001348 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800129e:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a41      	ldr	r2, [pc, #260]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	623b      	str	r3, [r7, #32]
 80012b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a3b      	ldr	r2, [pc, #236]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a35      	ldr	r2, [pc, #212]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ANLG_1_Pin|ANLG_2_Pin|ANLG_3_Pin|ANLG_5_Pin;
 80012fe:	230f      	movs	r3, #15
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	4826      	ldr	r0, [pc, #152]	; (80013ac <HAL_ADC_MspInit+0x130>)
 8001312:	f002 f82d 	bl	8003370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DIG_1_Pin|ANLG_4_Pin|DIG_2_Pin|DRS_ISENSE_OUT_2_Pin;
 8001316:	23d8      	movs	r3, #216	; 0xd8
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	4821      	ldr	r0, [pc, #132]	; (80013b0 <HAL_ADC_MspInit+0x134>)
 800132a:	f002 f821 	bl	8003370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRS_ISENSE_OUT_1_Pin;
 800132e:	2301      	movs	r3, #1
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001332:	2303      	movs	r3, #3
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRS_ISENSE_OUT_1_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	481c      	ldr	r0, [pc, #112]	; (80013b4 <HAL_ADC_MspInit+0x138>)
 8001342:	f002 f815 	bl	8003370 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001346:	e029      	b.n	800139c <HAL_ADC_MspInit+0x120>
  else if(hadc->Instance==ADC3)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <HAL_ADC_MspInit+0x13c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d124      	bne.n	800139c <HAL_ADC_MspInit+0x120>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 8001358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 8001370:	f043 0320 	orr.w	r3, r3, #32
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_ADC_MspInit+0x12c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0320 	and.w	r3, r3, #32
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FRONT_ISENSE_OUT_R_Pin|FRONT_ISENSE_OUT_L_Pin;
 8001382:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001388:	2303      	movs	r3, #3
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	4809      	ldr	r0, [pc, #36]	; (80013bc <HAL_ADC_MspInit+0x140>)
 8001398:	f001 ffea 	bl	8003370 <HAL_GPIO_Init>
}
 800139c:	bf00      	nop
 800139e:	3738      	adds	r7, #56	; 0x38
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40012000 	.word	0x40012000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40012200 	.word	0x40012200
 80013bc:	40021400 	.word	0x40021400

080013c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_CAN_MspInit+0xac>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d140      	bne.n	8001464 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_CAN_MspInit+0xb0>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a22      	ldr	r2, [pc, #136]	; (8001470 <HAL_CAN_MspInit+0xb0>)
 80013e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <HAL_CAN_MspInit+0xb0>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_CAN_MspInit+0xb0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <HAL_CAN_MspInit+0xb0>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_CAN_MspInit+0xb0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001412:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001424:	2309      	movs	r3, #9
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4811      	ldr	r0, [pc, #68]	; (8001474 <HAL_CAN_MspInit+0xb4>)
 8001430:	f001 ff9e 	bl	8003370 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2105      	movs	r1, #5
 8001438:	2013      	movs	r0, #19
 800143a:	f001 ff6f 	bl	800331c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800143e:	2013      	movs	r0, #19
 8001440:	f001 ff88 	bl	8003354 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2105      	movs	r1, #5
 8001448:	2014      	movs	r0, #20
 800144a:	f001 ff67 	bl	800331c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800144e:	2014      	movs	r0, #20
 8001450:	f001 ff80 	bl	8003354 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2105      	movs	r1, #5
 8001458:	2015      	movs	r0, #21
 800145a:	f001 ff5f 	bl	800331c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800145e:	2015      	movs	r0, #21
 8001460:	f001 ff78 	bl	8003354 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40006400 	.word	0x40006400
 8001470:	40023800 	.word	0x40023800
 8001474:	40020400 	.word	0x40020400

08001478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001488:	d10c      	bne.n	80014a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_TIM_Base_MspInit+0x5c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_TIM_Base_MspInit+0x5c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_TIM_Base_MspInit+0x5c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80014a2:	e010      	b.n	80014c6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <HAL_TIM_Base_MspInit+0x60>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10b      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_TIM_Base_MspInit+0x5c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_TIM_Base_MspInit+0x5c>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_TIM_Base_MspInit+0x5c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014fc:	d11c      	bne.n	8001538 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <HAL_TIM_MspPostInit+0xa8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a20      	ldr	r2, [pc, #128]	; (8001584 <HAL_TIM_MspPostInit+0xa8>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <HAL_TIM_MspPostInit+0xa8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001516:	2307      	movs	r3, #7
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001526:	2301      	movs	r3, #1
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4815      	ldr	r0, [pc, #84]	; (8001588 <HAL_TIM_MspPostInit+0xac>)
 8001532:	f001 ff1d 	bl	8003370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001536:	e020      	b.n	800157a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a13      	ldr	r2, [pc, #76]	; (800158c <HAL_TIM_MspPostInit+0xb0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d11b      	bne.n	800157a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_TIM_MspPostInit+0xa8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_TIM_MspPostInit+0xa8>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_TIM_MspPostInit+0xa8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800155a:	2340      	movs	r3, #64	; 0x40
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800156a:	2303      	movs	r3, #3
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4806      	ldr	r0, [pc, #24]	; (8001590 <HAL_TIM_MspPostInit+0xb4>)
 8001576:	f001 fefb 	bl	8003370 <HAL_GPIO_Init>
}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000
 800158c:	40010400 	.word	0x40010400
 8001590:	40020800 	.word	0x40020800

08001594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	; 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	2036      	movs	r0, #54	; 0x36
 80015aa:	f001 feb7 	bl	800331c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015ae:	2036      	movs	r0, #54	; 0x36
 80015b0:	f001 fed0 	bl	8003354 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_InitTick+0xa0>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <HAL_InitTick+0xa0>)
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_InitTick+0xa0>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015cc:	f107 0210 	add.w	r2, r7, #16
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 fd46 	bl	8004068 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015dc:	f002 fd30 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 80015e0:	4603      	mov	r3, r0
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	4a13      	ldr	r2, [pc, #76]	; (8001638 <HAL_InitTick+0xa4>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0c9b      	lsrs	r3, r3, #18
 80015f0:	3b01      	subs	r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_InitTick+0xa8>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <HAL_InitTick+0xac>)
 80015f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_InitTick+0xa8>)
 80015fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001600:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_InitTick+0xa8>)
 8001604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001606:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_InitTick+0xa8>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_InitTick+0xa8>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001614:	4809      	ldr	r0, [pc, #36]	; (800163c <HAL_InitTick+0xa8>)
 8001616:	f002 fd59 	bl	80040cc <HAL_TIM_Base_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d104      	bne.n	800162a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001620:	4806      	ldr	r0, [pc, #24]	; (800163c <HAL_InitTick+0xa8>)
 8001622:	f002 fdab 	bl	800417c <HAL_TIM_Base_Start_IT>
 8001626:	4603      	mov	r3, r0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3730      	adds	r7, #48	; 0x30
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	431bde83 	.word	0x431bde83
 800163c:	2000446c 	.word	0x2000446c
 8001640:	40001000 	.word	0x40001000

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <CAN1_TX_IRQHandler+0x10>)
 8001676:	f001 fbb0 	bl	8002dda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20004444 	.word	0x20004444

08001684 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <CAN1_RX0_IRQHandler+0x10>)
 800168a:	f001 fba6 	bl	8002dda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20004444 	.word	0x20004444

08001698 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <CAN1_RX1_IRQHandler+0x10>)
 800169e:	f001 fb9c 	bl	8002dda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20004444 	.word	0x20004444

080016ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM6_DAC_IRQHandler+0x10>)
 80016b2:	f002 ff37 	bl	8004524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000446c 	.word	0x2000446c

080016c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ea:	490e      	ldr	r1, [pc, #56]	; (8001724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001700:	4c0b      	ldr	r4, [pc, #44]	; (8001730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800170e:	f7ff ffd7 	bl	80016c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f005 f94f 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7ff f979 	bl	8000a0c <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001728:	08006ab8 	.word	0x08006ab8
  ldr r2, =_sbss
 800172c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001730:	20004ba4 	.word	0x20004ba4

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>
	...

08001738 <init_can>:
//  MODULE_ID module_id:     what module this is (ex. PDM_ID, ACM_ID)
//  BXCAN_TYPE bx_type:      master or slave BXcan type. This is usually BXTYPE_MASTER
// returns:
//  error codes specified in GopherCAN.h
S8 init_can(CAN_HandleTypeDef* hcan, MODULE_ID module_id, BXCAN_TYPE bx_type)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	70fb      	strb	r3, [r7, #3]
 8001744:	4613      	mov	r3, r2
 8001746:	70bb      	strb	r3, [r7, #2]
	U8 c;

	// set the current module
	this_module_id = module_id;
 8001748:	4a35      	ldr	r2, [pc, #212]	; (8001820 <init_can+0xe8>)
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	7013      	strb	r3, [r2, #0]


	// init HAL_GetTick()
	HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 800174e:	2001      	movs	r0, #1
 8001750:	f000 fbdc 	bl	8001f0c <HAL_SetTickFreq>

	// setup the two buffers
	init_buffer(&rx_buffer, rx_buffer_mem, RX_BUFFER_SIZE);
 8001754:	2220      	movs	r2, #32
 8001756:	4933      	ldr	r1, [pc, #204]	; (8001824 <init_can+0xec>)
 8001758:	4833      	ldr	r0, [pc, #204]	; (8001828 <init_can+0xf0>)
 800175a:	f000 facf 	bl	8001cfc <init_buffer>
	init_buffer(&tx_buffer, tx_buffer_mem, TX_BUFFER_SIZE);
 800175e:	2220      	movs	r2, #32
 8001760:	4932      	ldr	r1, [pc, #200]	; (800182c <init_can+0xf4>)
 8001762:	4833      	ldr	r0, [pc, #204]	; (8001830 <init_can+0xf8>)
 8001764:	f000 faca 	bl	8001cfc <init_buffer>
	init_buffer(&tx_buffer_2, tx_buffer_mem_2, TX_BUFFER_SIZE);
#endif // NUM_OF_BUSSES > 2
#endif // MULTI_BUS

	// init all of the parameter data
	init_all_params();
 8001768:	f000 f868 	bl	800183c <init_all_params>

	// set each function pointer to the do_nothing() function
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e01f      	b.n	80017b2 <init_can+0x7a>
	{
		cust_funcs[c].func_ptr = &do_nothing;
 8001772:	7bfa      	ldrb	r2, [r7, #15]
 8001774:	492f      	ldr	r1, [pc, #188]	; (8001834 <init_can+0xfc>)
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	4a2d      	ldr	r2, [pc, #180]	; (8001838 <init_can+0x100>)
 8001782:	601a      	str	r2, [r3, #0]
		cust_funcs[c].func_enabled = FALSE;
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	492b      	ldr	r1, [pc, #172]	; (8001834 <init_can+0xfc>)
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3304      	adds	r3, #4
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
		cust_funcs[c].param_ptr = NULL;
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	4926      	ldr	r1, [pc, #152]	; (8001834 <init_can+0xfc>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	3308      	adds	r3, #8
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	3301      	adds	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d9dc      	bls.n	8001772 <init_can+0x3a>

	}

	if (init_filters(hcan, bx_type))
 80017b8:	78bb      	ldrb	r3, [r7, #2]
 80017ba:	4619      	mov	r1, r3
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f887 	bl	80018d0 <init_filters>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <init_can+0x96>
	{
		return FILTER_SET_FAILED;
 80017c8:	f06f 0304 	mvn.w	r3, #4
 80017cc:	e024      	b.n	8001818 <init_can+0xe0>
	}

	// Setup the rx interrupt function to interrupt on any pending message
	// will call methods following the format HAL_CAN_xxxCallback()
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK
 80017ce:	2102      	movs	r1, #2
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f001 fab5 	bl	8002d40 <HAL_CAN_ActivateNotification>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d106      	bne.n	80017ea <init_can+0xb2>
			|| HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80017dc:	2110      	movs	r1, #16
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f001 faae 	bl	8002d40 <HAL_CAN_ActivateNotification>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <init_can+0xb8>
	{
		return IRQ_SET_FAILED;
 80017ea:	f06f 0305 	mvn.w	r3, #5
 80017ee:	e013      	b.n	8001818 <init_can+0xe0>
	}

	// The F7xx includes interrupts for when a message is complete. Activate them here
#if TARGET == F7XX || TARGET == F4XX
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80017f0:	2101      	movs	r1, #1
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f001 faa4 	bl	8002d40 <HAL_CAN_ActivateNotification>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <init_can+0xcc>
	{
		return IRQ_SET_FAILED;
 80017fe:	f06f 0305 	mvn.w	r3, #5
 8001802:	e009      	b.n	8001818 <init_can+0xe0>
	}
#endif // TARGET == F7XX || TARGET == F4XX

	// start can!
	if (HAL_CAN_Start(hcan) != HAL_OK)
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f001 f80d 	bl	8002824 <HAL_CAN_Start>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <init_can+0xde>
	{
		return CAN_START_FAILED;
 8001810:	f06f 0306 	mvn.w	r3, #6
 8001814:	e000      	b.n	8001818 <init_can+0xe0>
	}

	return CAN_SUCCESS;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20004940 	.word	0x20004940
 8001824:	200044c4 	.word	0x200044c4
 8001828:	200046c4 	.word	0x200046c4
 800182c:	200046cc 	.word	0x200046cc
 8001830:	200048cc 	.word	0x200048cc
 8001834:	200048d4 	.word	0x200048d4
 8001838:	08001cd9 	.word	0x08001cd9

0800183c <init_all_params>:


// init_all_params
//  function to run through each parameter and set the default data in the struct
static void init_all_params(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
	U16 c;
	CAN_INFO_STRUCT* data_struct;

	// set the param id for CAN commands
	can_command.param_id = CAN_COMMAND_ID;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <init_all_params+0x50>)
 8001844:	2200      	movs	r2, #0
 8001846:	719a      	strb	r2, [r3, #6]

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8001848:	2301      	movs	r3, #1
 800184a:	80fb      	strh	r3, [r7, #6]
 800184c:	e014      	b.n	8001878 <init_all_params+0x3c>
	{
		data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[c]);
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <init_all_params+0x54>)
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	603b      	str	r3, [r7, #0]

		data_struct->last_rx = 0;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
		data_struct->update_enabled = FALSE;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2200      	movs	r2, #0
 8001862:	711a      	strb	r2, [r3, #4]
		data_struct->pending_response = FALSE;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	715a      	strb	r2, [r3, #5]

		// set the ID for each parameter
		data_struct->param_id = c;
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	719a      	strb	r2, [r3, #6]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	3301      	adds	r3, #1
 8001876:	80fb      	strh	r3, [r7, #6]
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	2b31      	cmp	r3, #49	; 0x31
 800187c:	d9e7      	bls.n	800184e <init_all_params+0x12>
	}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	200049b0 	.word	0x200049b0
 8001890:	2000002c 	.word	0x2000002c

08001894 <set_all_params_state>:
//  Function to set each parameter in gopherCAN to enabled(true) or disabled (false). This
//  is easier than manually enabling all of them.
// params:
//  boolean enabled: the state to set all of the parameters to
void set_all_params_state(boolean enabled)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	U16 c;

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 800189e:	2301      	movs	r3, #1
 80018a0:	81fb      	strh	r3, [r7, #14]
 80018a2:	e008      	b.n	80018b6 <set_all_params_state+0x22>
	{
		((CAN_INFO_STRUCT*)(all_parameter_structs[c]))->update_enabled = enabled;
 80018a4:	89fb      	ldrh	r3, [r7, #14]
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <set_all_params_state+0x38>)
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	711a      	strb	r2, [r3, #4]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 80018b0:	89fb      	ldrh	r3, [r7, #14]
 80018b2:	3301      	adds	r3, #1
 80018b4:	81fb      	strh	r3, [r7, #14]
 80018b6:	89fb      	ldrh	r3, [r7, #14]
 80018b8:	2b31      	cmp	r3, #49	; 0x31
 80018ba:	d9f3      	bls.n	80018a4 <set_all_params_state+0x10>
	}
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	2000002c 	.word	0x2000002c

080018d0 <init_filters>:


// init_filters
//  function called within init() that sets up all of the filters
static S8 init_filters(CAN_HandleTypeDef* hcan, BXCAN_TYPE bx_type)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
	CAN_FilterTypeDef filterConfig;
	U8 banknum = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if (bx_type == BXTYPE_SLAVE)
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d102      	bne.n	80018ee <init_filters+0x1e>
	{
		banknum = SLAVE_FIRST_FILTER;
 80018e8:	230e      	movs	r3, #14
 80018ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// DEBUG
#ifdef FILTER_SET_FAILED
//#ifdef CAN_ROUTER
	// Accept all messages on the CAN router
	filterConfig.FilterBank = banknum;                                // Modify bank 0 (of 13)
 80018ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018f2:	623b      	str	r3, [r7, #32]
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;                // enable the filter
 80018f4:	2301      	movs	r3, #1
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;             // use FIFO0
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;                  // Use mask mode to filter
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;                 // 32 bit mask
 8001900:	2301      	movs	r3, #1
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
	filterConfig.FilterIdLow = 0;                                     // Low bound of accepted values
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0xFFFF;                               // High bound of accepted values
 8001908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190c:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = 0;                                 // Which bits matter when filtering (high)
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = 0;                                // Which bits matter when filtering (low)
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	4619      	mov	r1, r3
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fea1 	bl	8002664 <HAL_CAN_ConfigFilter>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <init_filters+0x5e>
	{
		return FILTER_SET_FAILED;
 8001928:	f06f 0304 	mvn.w	r3, #4
 800192c:	e000      	b.n	8001930 <init_filters+0x60>
	{
		return FILTER_SET_FAILED;
	}
#endif // CAN_ROUTER

	return CAN_SUCCESS;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3738      	adds	r7, #56	; 0x38
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_CAN_RxFifo0MsgPendingCallback>:


// HAL_CAN_RxFifo0MsgPendingCallback
//  ISR called when CAN_RX_FIFO0 has a pending message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
    FIFO0_RX_CALLBACK
 8001940:	2100      	movs	r1, #0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f8a6 	bl	8001a94 <service_can_rx_hardware>
	//service_can_rx_hardware(hcan, CAN_RX_FIFO0);
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_CAN_RxFifo1MsgPendingCallback>:


// HAL_CAN_RxFifo1MsgPendingCallback
//  ISR called when CAN_RX_FIFO1 has a pending message
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    FIFO1_RX_CALLBACK
 8001958:	2101      	movs	r1, #1
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f89a 	bl	8001a94 <service_can_rx_hardware>
	//service_can_rx_hardware(hcan, CAN_RX_FIFO1);
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <request_parameter>:
//  MODULE_ID dest_module:    what module to request the parameter from
//  GCAN_PARAM_ID parameter:  what parameter to request
// returns:
//  error codes specified in GopherCAN.h
S8 request_parameter(PRIORITY priority, MODULE_ID dest_module, GCAN_PARAM_ID parameter)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	460b      	mov	r3, r1
 8001974:	71bb      	strb	r3, [r7, #6]
 8001976:	4613      	mov	r3, r2
 8001978:	717b      	strb	r3, [r7, #5]
	CAN_MSG message;
	CAN_ID id;

	if (dest_module < 0 || dest_module >= NUM_OF_MODULES)
 800197a:	79bb      	ldrb	r3, [r7, #6]
 800197c:	2b07      	cmp	r3, #7
 800197e:	d902      	bls.n	8001986 <request_parameter+0x1e>
	{
		return BAD_MODULE_ID;
 8001980:	f06f 0301 	mvn.w	r3, #1
 8001984:	e02c      	b.n	80019e0 <request_parameter+0x78>
	}

	if (parameter <= CAN_COMMAND_ID || parameter >= NUM_OF_PARAMETERS)
 8001986:	797b      	ldrb	r3, [r7, #5]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <request_parameter+0x2a>
 800198c:	797b      	ldrb	r3, [r7, #5]
 800198e:	2b31      	cmp	r3, #49	; 0x31
 8001990:	d902      	bls.n	8001998 <request_parameter+0x30>
	{
		return BAD_PARAMETER_ID;
 8001992:	f06f 0302 	mvn.w	r3, #2
 8001996:	e023      	b.n	80019e0 <request_parameter+0x78>
	}

	id.priority = priority;
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	723b      	strb	r3, [r7, #8]
	id.dest_module = dest_module;
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	727b      	strb	r3, [r7, #9]
	id.source_module = this_module_id;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <request_parameter+0x80>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	72bb      	strb	r3, [r7, #10]
	id.error = FALSE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	72fb      	strb	r3, [r7, #11]
	id.parameter = parameter;
 80019aa:	797b      	ldrb	r3, [r7, #5]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &id);
 80019b0:	f107 0208 	add.w	r2, r7, #8
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f8ea 	bl	8001b94 <build_message_id>

	// set the RTR bit to REQUEST_DATA
	message.rtr_bit = REQUEST_DATA;
 80019c0:	2302      	movs	r3, #2
 80019c2:	753b      	strb	r3, [r7, #20]

	message.dlc = REQ_PARAM_SIZE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	757b      	strb	r3, [r7, #21]

	// set the pending response to true for this parameter, will be set to true once
	// the value is received from the CAN bus
	((CAN_INFO_STRUCT*)(all_parameter_structs[parameter]))->pending_response = TRUE;
 80019c8:	797b      	ldrb	r3, [r7, #5]
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <request_parameter+0x84>)
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	2201      	movs	r2, #1
 80019d2:	715a      	strb	r2, [r3, #5]

	return tx_can_message(&message);
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f8ad 	bl	8001b38 <tx_can_message>
 80019de:	4603      	mov	r3, r0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20004940 	.word	0x20004940
 80019ec:	2000002c 	.word	0x2000002c

080019f0 <service_can_tx_hardware>:
//  Method to interact directly with the CAN registers through the HAL_CAN commands.
//  then will fill as many tx mailboxes as possible from the tx_message_buffer
//
//  designed to be called at high priority on 1ms loop
void service_can_tx_hardware(CAN_HandleTypeDef* hcan)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

	// With multiple busses, choose the correct bus buffer to be working with
#ifdef MULTI_BUS
	buffer = choose_tx_buffer_from_hcan(hcan);
#else
	buffer = &tx_buffer;
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <service_can_tx_hardware+0x9c>)
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif // MULTI_BUS

	// add messages to the the TX mailboxes until they are full
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 80019fc:	e037      	b.n	8001a6e <service_can_tx_hardware+0x7e>
	{
		U32 tx_mailbox_num;

		// Turn off the TX interrupt (if applicable)
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_DeactivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 80019fe:	2101      	movs	r1, #1
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f001 f9c3 	bl	8002d8c <HAL_CAN_DeactivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX

		// get the next CAN message from the TX buffer (FIFO)
		message = GET_FROM_BUFFER(buffer, 0);
 8001a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a08:	6819      	ldr	r1, [r3, #0]
 8001a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0c:	795b      	ldrb	r3, [r3, #5]
 8001a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a10:	7912      	ldrb	r2, [r2, #4]
 8001a12:	fb93 f0f2 	sdiv	r0, r3, r2
 8001a16:	fb02 f200 	mul.w	r2, r2, r0
 8001a1a:	1a9b      	subs	r3, r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	440b      	add	r3, r1
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28

		// configure the settings/params of the CAN message
		tx_header.IDE = CAN_ID_EXT;                                          // 29 bit id
 8001a22:	2304      	movs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
		tx_header.TransmitGlobalTime = DISABLE;                              // do not send a timestamp
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		tx_header.ExtId = message->id;
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	617b      	str	r3, [r7, #20]
		tx_header.RTR = message->rtr_bit;
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	791b      	ldrb	r3, [r3, #4]
 8001a36:	61fb      	str	r3, [r7, #28]
		tx_header.DLC = message->dlc;
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3a:	795b      	ldrb	r3, [r3, #5]
 8001a3c:	623b      	str	r3, [r7, #32]

		// add the message to the sending list
		if (HAL_CAN_AddTxMessage(hcan, &tx_header, message->data, &tx_mailbox_num) != HAL_OK)
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	1d9a      	adds	r2, r3, #6
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	f107 0110 	add.w	r1, r7, #16
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 ff2e 	bl	80028ac <HAL_CAN_AddTxMessage>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <service_can_tx_hardware+0x70>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <service_can_tx_hardware+0xa0>)
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e011      	b.n	8001a84 <service_can_tx_hardware+0x94>
			return;
		}

		// move the head now that the first element has been removed
		remove_from_front(buffer);
 8001a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a62:	f000 f964 	bl	8001d2e <remove_from_front>

		// re-enable the RX interrupt
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 8001a66:	2101      	movs	r1, #1
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f001 f969 	bl	8002d40 <HAL_CAN_ActivateNotification>
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 8001a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a70:	799b      	ldrb	r3, [r3, #6]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <service_can_tx_hardware+0x92>
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fff3 	bl	8002a62 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1bd      	bne.n	80019fe <service_can_tx_hardware+0xe>
#endif // TARGET == F7XX || TARGET == F4XX
	}

	return;
 8001a82:	bf00      	nop
}
 8001a84:	3730      	adds	r7, #48	; 0x30
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200048cc 	.word	0x200048cc
 8001a90:	20000574 	.word	0x20000574

08001a94 <service_can_rx_hardware>:
//  U32 rx_mailbox:         the mailbox to service (CAN_RX_FIFO0 or CAN_RX_FIFO1)
//                           Make sure this is valid, no error checking is done
//
//  designed to be called as an ISR whenever there is an RX message pending
void service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rx_header;
	CAN_MSG* message;

	// get all the pending RX messages from the RX mailbox and store into the RX buffer
	while (!IS_FULL(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8001a9e:	e037      	b.n	8001b10 <service_can_rx_hardware+0x7c>
	{
		// set message to the correct pointer from the RX buffer (the "last" message in the buffer)
		message = GET_FROM_BUFFER(&rx_buffer, rx_buffer.fill_level);
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <service_can_rx_hardware+0x9c>)
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <service_can_rx_hardware+0x9c>)
 8001aa6:	795b      	ldrb	r3, [r3, #5]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <service_can_rx_hardware+0x9c>)
 8001aac:	799b      	ldrb	r3, [r3, #6]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <service_can_rx_hardware+0x9c>)
 8001ab2:	7912      	ldrb	r2, [r2, #4]
 8001ab4:	fb93 f0f2 	sdiv	r0, r3, r2
 8001ab8:	fb02 f200 	mul.w	r2, r2, r0
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	440b      	add	r3, r1
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24

		// Build the message from the registers on the STM32
		if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message->data) != HAL_OK)
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	3306      	adds	r3, #6
 8001ac8:	f107 0208 	add.w	r2, r7, #8
 8001acc:	6839      	ldr	r1, [r7, #0]
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fffc 	bl	8002acc <HAL_CAN_GetRxMessage>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <service_can_rx_hardware+0x50>
		{
			// this will always return HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <service_can_rx_hardware+0xa0>)
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e022      	b.n	8001b2a <service_can_rx_hardware+0x96>
			return;
		}

		// modify the rx_buffer data to reflect the new message
		rx_buffer.fill_level++;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <service_can_rx_hardware+0x9c>)
 8001ae6:	799b      	ldrb	r3, [r3, #6]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <service_can_rx_hardware+0x9c>)
 8001aee:	719a      	strb	r2, [r3, #6]

		// move the header ID, RTR bit, and DLC into the GopherCAN message struct
		message->rtr_bit = rx_header.RTR;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	711a      	strb	r2, [r3, #4]
		message->dlc = rx_header.DLC;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	715a      	strb	r2, [r3, #5]
		message->id = (rx_header.IDE ? rx_header.ExtId : rx_header.StdId);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <service_can_rx_hardware+0x76>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	e000      	b.n	8001b0c <service_can_rx_hardware+0x78>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0e:	6013      	str	r3, [r2, #0]
	while (!IS_FULL(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <service_can_rx_hardware+0x9c>)
 8001b12:	799a      	ldrb	r2, [r3, #6]
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <service_can_rx_hardware+0x9c>)
 8001b16:	791b      	ldrb	r3, [r3, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d206      	bcs.n	8001b2a <service_can_rx_hardware+0x96>
 8001b1c:	6839      	ldr	r1, [r7, #0]
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f001 f8e6 	bl	8002cf0 <HAL_CAN_GetRxFifoFillLevel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ba      	bne.n	8001aa0 <service_can_rx_hardware+0xc>
		// router specific functionality that directly adds messages that need to be routed
		//  directly to the correct TX buffer (if needed, that decision is made within the function)
		rout_can_message(hcan, message);
#endif // CAN_ROUTER
	}
}
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200046c4 	.word	0x200046c4
 8001b34:	20000574 	.word	0x20000574

08001b38 <tx_can_message>:


// tx_can_message
//  Takes in a CAN_MSG struct, adds it to the TX buffer
static S8 tx_can_message(CAN_MSG* message_to_add)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	CAN_MSG_RING_BUFFER* buffer;

	// remove any trailing zeros in the CAN message. This is done by starting at the
	// back of the message and decrementing the DLC for each byte in the message that
	// is zero at the back. RX logic will add zero bytes as needed
	while (message_to_add->dlc > 0
 8001b40:	e005      	b.n	8001b4e <tx_can_message+0x16>
			&& message_to_add->data[message_to_add->dlc - 1] == 0)
	{
		message_to_add->dlc--;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	795b      	ldrb	r3, [r3, #5]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	715a      	strb	r2, [r3, #5]
	while (message_to_add->dlc > 0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	795b      	ldrb	r3, [r3, #5]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <tx_can_message+0x2e>
			&& message_to_add->data[message_to_add->dlc - 1] == 0)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	795b      	ldrb	r3, [r3, #5]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	799b      	ldrb	r3, [r3, #6]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ed      	beq.n	8001b42 <tx_can_message+0xa>

	// If there are multiple busses, choose the correct bus based on the routing table
	buffer = choose_tx_buffer_from_dest_module(message_to_add);

#else
	buffer = &tx_buffer;
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <tx_can_message+0x58>)
 8001b68:	60fb      	str	r3, [r7, #12]
#endif // MULTI_BUS

	// check to make sure the buffer is not full, then add it to the back of the TX buffer
	if (IS_FULL(buffer))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	799a      	ldrb	r2, [r3, #6]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	791b      	ldrb	r3, [r3, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d302      	bcc.n	8001b7c <tx_can_message+0x44>
	{
		return TX_BUFFER_FULL;
 8001b76:	f06f 0307 	mvn.w	r3, #7
 8001b7a:	e004      	b.n	8001b86 <tx_can_message+0x4e>
#endif // TARGET == F7XX || TARGET == F4XX

	return CAN_SUCCESS;
}
#else
    add_message_by_highest_prio(buffer, message_to_add);
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f8f7 	bl	8001d72 <add_message_by_highest_prio>

    return CAN_SUCCESS;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200048cc 	.word	0x200048cc

08001b94 <build_message_id>:

// build_can_id
//  this function will fill in the id of msg when called.
//  No error checking is preformed in this function besides masking
static void build_message_id(CAN_MSG* msg, CAN_ID* id)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
	U32 temp;

	msg->id = 0;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

	// priority bit
	temp = !!id->priority;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PRIORITY_POS - PRIORITY_SIZE);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	071b      	lsls	r3, r3, #28
 8001bb8:	60fb      	str	r3, [r7, #12]
	temp &= PRIORITY_MASK;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	601a      	str	r2, [r3, #0]

	// destination bits
	temp = id->dest_module;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	785b      	ldrb	r3, [r3, #1]
 8001bd2:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - DEST_POS - DEST_SIZE);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	059b      	lsls	r3, r3, #22
 8001bd8:	60fb      	str	r3, [r7, #12]
	temp &= DEST_MASK;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f003 637c 	and.w	r3, r3, #264241152	; 0xfc00000
 8001be0:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	601a      	str	r2, [r3, #0]

    // source bits
	temp = id->source_module;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	789b      	ldrb	r3, [r3, #2]
 8001bf2:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - SOURCE_POS - SOURCE_SIZE);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	60fb      	str	r3, [r7, #12]
	temp &= SOURCE_MASK;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001c00:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	601a      	str	r2, [r3, #0]

	// error bit
	temp = id->error;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	78db      	ldrb	r3, [r3, #3]
 8001c12:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - ERROR_POS - ERROR_SIZE);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	03db      	lsls	r3, r3, #15
 8001c18:	60fb      	str	r3, [r7, #12]
	temp &= ERROR_MASK;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c20:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	601a      	str	r2, [r3, #0]

	// parameter bits
	temp = id->parameter;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	889b      	ldrh	r3, [r3, #4]
 8001c32:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PARAM_POS - PARAM_SIZE);
	temp &= PARAM_MASK;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c3a:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	601a      	str	r2, [r3, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_CAN_TxMailbox0CompleteCallback>:


// the F7xx has ISRs for available TX mailboxes having an opening. All callbacks should service the TX hardware
#if TARGET == F7XX || TARGET == F4XX
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fec7 	bl	80019f0 <service_can_tx_hardware>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff febc 	bl	80019f0 <service_can_tx_hardware>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff feb1 	bl	80019f0 <service_can_tx_hardware>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef* hcan)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fea6 	bl	80019f0 <service_can_tx_hardware>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef* hcan)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fe9b 	bl	80019f0 <service_can_tx_hardware>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef* hcan)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fe90 	bl	80019f0 <service_can_tx_hardware>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <do_nothing>:
// do_nothing
//  this exists to give a default function pointer to all of the CAN commands
//  to avoid errors from bad function pointers
void do_nothing(U8 sending_module, void* param,
	U8 remote_param0, U8 remote_param1, U8 remote_param2, U8 remote_param3)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6039      	str	r1, [r7, #0]
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	71bb      	strb	r3, [r7, #6]
 8001cec:	4613      	mov	r3, r2
 8001cee:	717b      	strb	r3, [r7, #5]
	// this function has successfully done nothing
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <init_buffer>:


// init_buffer
//  initialize the buffer with the values passed in as parameters
void init_buffer(CAN_MSG_RING_BUFFER* buffer, CAN_MSG buffer_memory_ptr[], U8 buffer_size)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	4613      	mov	r3, r2
 8001d08:	71fb      	strb	r3, [r7, #7]
	buffer->head = 0;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	715a      	strb	r2, [r3, #5]
	buffer->fill_level = 0;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	719a      	strb	r2, [r3, #6]
	buffer->size = buffer_size;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	79fa      	ldrb	r2, [r7, #7]
 8001d1a:	711a      	strb	r2, [r3, #4]
	buffer->message_buffer = buffer_memory_ptr;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <remove_from_front>:


// remove_from_front
//  will remove the first element of the ring buffer. If the buffer is empty it will do nothing
void remove_from_front(CAN_MSG_RING_BUFFER* buffer)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	// don't do anything if the buffer is empty
	if (IS_EMPTY(buffer))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	799b      	ldrb	r3, [r3, #6]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d013      	beq.n	8001d66 <remove_from_front+0x38>
	{
		return;
	}

	// move the head to the next element
	buffer->head = (buffer->head + 1) % buffer->size;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	795b      	ldrb	r3, [r3, #5]
 8001d42:	3301      	adds	r3, #1
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	7912      	ldrb	r2, [r2, #4]
 8001d48:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d4c:	fb02 f201 	mul.w	r2, r2, r1
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	715a      	strb	r2, [r3, #5]

	// decrement the fill level
	buffer->fill_level--;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	799b      	ldrb	r3, [r3, #6]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	719a      	strb	r2, [r3, #6]
 8001d64:	e000      	b.n	8001d68 <remove_from_front+0x3a>
		return;
 8001d66:	bf00      	nop
}
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <add_message_by_highest_prio>:
//  This function will add message to the buffer based on the ID of the message. Higher
//  priority messages (lower ID) will be towards the front, with lower priority
//  messages (greater ID) will be towards the back. Removing from the front will get
//  the highest priority message. This function assumes the buffer is not full
void add_message_by_highest_prio(CAN_MSG_RING_BUFFER* buffer, CAN_MSG* message)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
	CAN_MSG* buffer_message = GET_FROM_BUFFER(buffer, 0);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6819      	ldr	r1, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	795b      	ldrb	r3, [r3, #5]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	7912      	ldrb	r2, [r2, #4]
 8001d88:	fb93 f0f2 	sdiv	r0, r3, r2
 8001d8c:	fb02 f200 	mul.w	r2, r2, r0
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	440b      	add	r3, r1
 8001d96:	60fb      	str	r3, [r7, #12]

	// start from the back of the buffer, moving each message towards the back
	// by one and put the new message in the correct spot by ID. If the buffer
	// was empty when the message first went through here, it will put the new
	// message in position 0
	buffer->fill_level++;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	799b      	ldrb	r3, [r3, #6]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	719a      	strb	r2, [r3, #6]
	for (c = buffer->fill_level - 2; c >= 0; c--)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	799b      	ldrb	r3, [r3, #6]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b02      	subs	r3, #2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	817b      	strh	r3, [r7, #10]
 8001db0:	e047      	b.n	8001e42 <add_message_by_highest_prio+0xd0>
	{
		buffer_message = GET_FROM_BUFFER(buffer, c);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	795b      	ldrb	r3, [r3, #5]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	7912      	ldrb	r2, [r2, #4]
 8001dc6:	fb93 f0f2 	sdiv	r0, r3, r2
 8001dca:	fb02 f200 	mul.w	r2, r2, r0
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	440b      	add	r3, r1
 8001dd4:	60fb      	str	r3, [r7, #12]
		if (message->id >= buffer_message->id)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d313      	bcc.n	8001e0a <add_message_by_highest_prio+0x98>
		{
			// we have found the correct place for the new message
			buffer_message = GET_FROM_BUFFER(buffer, c + 1);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	795b      	ldrb	r3, [r3, #5]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001df0:	4413      	add	r3, r2
 8001df2:	3301      	adds	r3, #1
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	7912      	ldrb	r2, [r2, #4]
 8001df8:	fb93 f0f2 	sdiv	r0, r3, r2
 8001dfc:	fb02 f200 	mul.w	r2, r2, r0
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	440b      	add	r3, r1
 8001e06:	60fb      	str	r3, [r7, #12]
			break;
 8001e08:	e01f      	b.n	8001e4a <add_message_by_highest_prio+0xd8>
		}

		// move this message back by 1 and try again
		copy_message(buffer_message, GET_FROM_BUFFER(buffer, c + 1));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	795b      	ldrb	r3, [r3, #5]
 8001e12:	461a      	mov	r2, r3
 8001e14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e18:	4413      	add	r3, r2
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	7912      	ldrb	r2, [r2, #4]
 8001e20:	fb93 f0f2 	sdiv	r0, r3, r2
 8001e24:	fb02 f200 	mul.w	r2, r2, r0
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	440b      	add	r3, r1
 8001e2e:	4619      	mov	r1, r3
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f812 	bl	8001e5a <copy_message>
	for (c = buffer->fill_level - 2; c >= 0; c--)
 8001e36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	817b      	strh	r3, [r7, #10]
 8001e42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	dab3      	bge.n	8001db2 <add_message_by_highest_prio+0x40>
	}

	// put the message into the buffer at this position
	copy_message(message, buffer_message);
 8001e4a:	68f9      	ldr	r1, [r7, #12]
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f000 f804 	bl	8001e5a <copy_message>
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <copy_message>:


// copy_message
//  function to copy all of the data in source to dest by value, not by refernce
static void copy_message(CAN_MSG* source, CAN_MSG* dest)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
	U8 c;

	dest->id = source->id;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	601a      	str	r2, [r3, #0]
	dest->dlc = source->dlc;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	795a      	ldrb	r2, [r3, #5]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	715a      	strb	r2, [r3, #5]
	dest->rtr_bit = source->rtr_bit;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	791a      	ldrb	r2, [r3, #4]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	711a      	strb	r2, [r3, #4]

	for (c = 0; c < dest->dlc; c++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e00b      	b.n	8001e9a <copy_message+0x40>
	{
		dest->data[c] = source->data[c];
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	440a      	add	r2, r1
 8001e8a:	7991      	ldrb	r1, [r2, #6]
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	460a      	mov	r2, r1
 8001e92:	719a      	strb	r2, [r3, #6]
	for (c = 0; c < dest->dlc; c++)
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	3301      	adds	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	795b      	ldrb	r3, [r3, #5]
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d3ee      	bcc.n	8001e82 <copy_message+0x28>
	}
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb6:	2003      	movs	r0, #3
 8001eb8:	f001 fa25 	bl	8003306 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff fb69 	bl	8001594 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001ec2:	f7ff f9b3 	bl	800122c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	200000f8 	.word	0x200000f8
 8001ef0:	20004ba0 	.word	0x20004ba0

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20004ba0 	.word	0x20004ba0

08001f0c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_SetTickFreq+0x48>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	79fa      	ldrb	r2, [r7, #7]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d012      	beq.n	8001f4a <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_SetTickFreq+0x48>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_SetTickFreq+0x48>)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_SetTickFreq+0x4c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fb2d 	bl	8001594 <HAL_InitTick>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <HAL_SetTickFreq+0x48>)
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200000f8 	.word	0x200000f8
 8001f58:	200000f4 	.word	0x200000f4

08001f5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e031      	b.n	8001fd6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff f97e 	bl	800127c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d116      	bne.n	8001fc8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_ADC_Init+0x84>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	f043 0202 	orr.w	r2, r3, #2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f964 	bl	8002278 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f023 0303 	bic.w	r3, r3, #3
 8001fbe:	f043 0201 	orr.w	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fc6:	e001      	b.n	8001fcc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	ffffeefd 	.word	0xffffeefd

08001fe4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1c>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e12a      	b.n	8002256 <HAL_ADC_ConfigChannel+0x272>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b09      	cmp	r3, #9
 800200e:	d93a      	bls.n	8002086 <HAL_ADC_ConfigChannel+0xa2>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002018:	d035      	beq.n	8002086 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68d9      	ldr	r1, [r3, #12]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	3b1e      	subs	r3, #30
 8002030:	2207      	movs	r2, #7
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	400a      	ands	r2, r1
 800203e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a87      	ldr	r2, [pc, #540]	; (8002264 <HAL_ADC_ConfigChannel+0x280>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10a      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68d9      	ldr	r1, [r3, #12]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	061a      	lsls	r2, r3, #24
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205e:	e035      	b.n	80020cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68d9      	ldr	r1, [r3, #12]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	4603      	mov	r3, r0
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4403      	add	r3, r0
 8002078:	3b1e      	subs	r3, #30
 800207a:	409a      	lsls	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002084:	e022      	b.n	80020cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6919      	ldr	r1, [r3, #16]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	2207      	movs	r2, #7
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43da      	mvns	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	400a      	ands	r2, r1
 80020a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6919      	ldr	r1, [r3, #16]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	4603      	mov	r3, r0
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4403      	add	r3, r0
 80020c2:	409a      	lsls	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d824      	bhi.n	800211e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3b05      	subs	r3, #5
 80020e6:	221f      	movs	r2, #31
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43da      	mvns	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	400a      	ands	r2, r1
 80020f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	3b05      	subs	r3, #5
 8002110:	fa00 f203 	lsl.w	r2, r0, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	635a      	str	r2, [r3, #52]	; 0x34
 800211c:	e04c      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d824      	bhi.n	8002170 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3b23      	subs	r3, #35	; 0x23
 8002138:	221f      	movs	r2, #31
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	400a      	ands	r2, r1
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	3b23      	subs	r3, #35	; 0x23
 8002162:	fa00 f203 	lsl.w	r2, r0, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
 800216e:	e023      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b41      	subs	r3, #65	; 0x41
 8002182:	221f      	movs	r2, #31
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43da      	mvns	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	400a      	ands	r2, r1
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	3b41      	subs	r3, #65	; 0x41
 80021ac:	fa00 f203 	lsl.w	r2, r0, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a2a      	ldr	r2, [pc, #168]	; (8002268 <HAL_ADC_ConfigChannel+0x284>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d10a      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x1f4>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ca:	d105      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <HAL_ADC_ConfigChannel+0x288>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a26      	ldr	r2, [pc, #152]	; (800226c <HAL_ADC_ConfigChannel+0x288>)
 80021d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80021d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a22      	ldr	r2, [pc, #136]	; (8002268 <HAL_ADC_ConfigChannel+0x284>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d109      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x212>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b12      	cmp	r3, #18
 80021e8:	d105      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_ADC_ConfigChannel+0x288>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_ADC_ConfigChannel+0x288>)
 80021f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_ADC_ConfigChannel+0x284>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d125      	bne.n	800224c <HAL_ADC_ConfigChannel+0x268>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_ADC_ConfigChannel+0x280>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d003      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x22e>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b11      	cmp	r3, #17
 8002210:	d11c      	bne.n	800224c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_ADC_ConfigChannel+0x288>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a15      	ldr	r2, [pc, #84]	; (800226c <HAL_ADC_ConfigChannel+0x288>)
 8002218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800221c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_ADC_ConfigChannel+0x280>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d111      	bne.n	800224c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_ADC_ConfigChannel+0x28c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_ADC_ConfigChannel+0x290>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	0c9a      	lsrs	r2, r3, #18
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800223e:	e002      	b.n	8002246 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3b01      	subs	r3, #1
 8002244:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f9      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	10000012 	.word	0x10000012
 8002268:	40012000 	.word	0x40012000
 800226c:	40012300 	.word	0x40012300
 8002270:	20000028 	.word	0x20000028
 8002274:	431bde83 	.word	0x431bde83

08002278 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002280:	4b78      	ldr	r3, [pc, #480]	; (8002464 <ADC_Init+0x1ec>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a77      	ldr	r2, [pc, #476]	; (8002464 <ADC_Init+0x1ec>)
 8002286:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800228a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800228c:	4b75      	ldr	r3, [pc, #468]	; (8002464 <ADC_Init+0x1ec>)
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4973      	ldr	r1, [pc, #460]	; (8002464 <ADC_Init+0x1ec>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	021a      	lsls	r2, r3, #8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	4a58      	ldr	r2, [pc, #352]	; (8002468 <ADC_Init+0x1f0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d022      	beq.n	8002352 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800231a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800233c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6899      	ldr	r1, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	e00f      	b.n	8002372 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002370:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0202 	bic.w	r2, r2, #2
 8002380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	005a      	lsls	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01b      	beq.n	80023d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	3b01      	subs	r3, #1
 80023cc:	035a      	lsls	r2, r3, #13
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	e007      	b.n	80023e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	3b01      	subs	r3, #1
 8002404:	051a      	lsls	r2, r3, #20
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800241c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800242a:	025a      	lsls	r2, r3, #9
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002442:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6899      	ldr	r1, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	029a      	lsls	r2, r3, #10
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	609a      	str	r2, [r3, #8]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40012300 	.word	0x40012300
 8002468:	0f000001 	.word	0x0f000001

0800246c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0ed      	b.n	800265a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe ff98 	bl	80013c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0202 	bic.w	r2, r2, #2
 800249e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024a0:	f7ff fd28 	bl	8001ef4 <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024a6:	e012      	b.n	80024ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024a8:	f7ff fd24 	bl	8001ef4 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b0a      	cmp	r3, #10
 80024b4:	d90b      	bls.n	80024ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2205      	movs	r2, #5
 80024c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e0c5      	b.n	800265a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e5      	bne.n	80024a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ec:	f7ff fd02 	bl	8001ef4 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024f2:	e012      	b.n	800251a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024f4:	f7ff fcfe 	bl	8001ef4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b0a      	cmp	r3, #10
 8002500:	d90b      	bls.n	800251a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2205      	movs	r2, #5
 8002512:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e09f      	b.n	800265a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0e5      	beq.n	80024f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7e1b      	ldrb	r3, [r3, #24]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d108      	bne.n	8002542 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e007      	b.n	8002552 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7e5b      	ldrb	r3, [r3, #25]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d108      	bne.n	800256c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e007      	b.n	800257c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7e9b      	ldrb	r3, [r3, #26]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d108      	bne.n	8002596 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0220 	orr.w	r2, r2, #32
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e007      	b.n	80025a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0220 	bic.w	r2, r2, #32
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7edb      	ldrb	r3, [r3, #27]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0210 	bic.w	r2, r2, #16
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e007      	b.n	80025d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0210 	orr.w	r2, r2, #16
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7f1b      	ldrb	r3, [r3, #28]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0208 	orr.w	r2, r2, #8
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e007      	b.n	80025fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0208 	bic.w	r2, r2, #8
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7f5b      	ldrb	r3, [r3, #29]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d108      	bne.n	8002614 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0204 	orr.w	r2, r2, #4
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e007      	b.n	8002624 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0204 	bic.w	r2, r2, #4
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	ea42 0103 	orr.w	r1, r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	1e5a      	subs	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800267a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d003      	beq.n	800268a <HAL_CAN_ConfigFilter+0x26>
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b02      	cmp	r3, #2
 8002686:	f040 80be 	bne.w	8002806 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800268a:	4b65      	ldr	r3, [pc, #404]	; (8002820 <HAL_CAN_ConfigFilter+0x1bc>)
 800268c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	431a      	orrs	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2201      	movs	r2, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	43db      	mvns	r3, r3
 80026dc:	401a      	ands	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d123      	bne.n	8002734 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	401a      	ands	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800270e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3248      	adds	r2, #72	; 0x48
 8002714:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002728:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800272a:	6979      	ldr	r1, [r7, #20]
 800272c:	3348      	adds	r3, #72	; 0x48
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d122      	bne.n	8002782 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	431a      	orrs	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800275c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3248      	adds	r2, #72	; 0x48
 8002762:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002776:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002778:	6979      	ldr	r1, [r7, #20]
 800277a:	3348      	adds	r3, #72	; 0x48
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	440b      	add	r3, r1
 8002780:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43db      	mvns	r3, r3
 8002794:	401a      	ands	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800279c:	e007      	b.n	80027ae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43db      	mvns	r3, r3
 80027c0:	401a      	ands	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027c8:	e007      	b.n	80027da <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027f8:	f023 0201 	bic.w	r2, r3, #1
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e006      	b.n	8002814 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
  }
}
 8002814:	4618      	mov	r0, r3
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40006400 	.word	0x40006400

08002824 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d12e      	bne.n	8002896 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002850:	f7ff fb50 	bl	8001ef4 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002856:	e012      	b.n	800287e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002858:	f7ff fb4c 	bl	8001ef4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b0a      	cmp	r3, #10
 8002864:	d90b      	bls.n	800287e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2205      	movs	r2, #5
 8002876:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e012      	b.n	80028a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e5      	bne.n	8002858 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	e006      	b.n	80028a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028ca:	7ffb      	ldrb	r3, [r7, #31]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d003      	beq.n	80028d8 <HAL_CAN_AddTxMessage+0x2c>
 80028d0:	7ffb      	ldrb	r3, [r7, #31]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	f040 80b8 	bne.w	8002a48 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80a0 	beq.w	8002a38 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	0e1b      	lsrs	r3, r3, #24
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d907      	bls.n	8002918 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e09e      	b.n	8002a56 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002918:	2201      	movs	r2, #1
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	409a      	lsls	r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10d      	bne.n	8002946 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	6809      	ldr	r1, [r1, #0]
 8002938:	431a      	orrs	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3318      	adds	r3, #24
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	440b      	add	r3, r1
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e00f      	b.n	8002966 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002950:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002956:	68f9      	ldr	r1, [r7, #12]
 8002958:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800295a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3318      	adds	r3, #24
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	440b      	add	r3, r1
 8002964:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3318      	adds	r3, #24
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	440b      	add	r3, r1
 8002976:	3304      	adds	r3, #4
 8002978:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	7d1b      	ldrb	r3, [r3, #20]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d111      	bne.n	80029a6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3318      	adds	r3, #24
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	4413      	add	r3, r2
 800298e:	3304      	adds	r3, #4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	6811      	ldr	r1, [r2, #0]
 8002996:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3318      	adds	r3, #24
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	440b      	add	r3, r1
 80029a2:	3304      	adds	r3, #4
 80029a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3307      	adds	r3, #7
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	061a      	lsls	r2, r3, #24
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3306      	adds	r3, #6
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3305      	adds	r3, #5
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	4313      	orrs	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	3204      	adds	r2, #4
 80029c6:	7812      	ldrb	r2, [r2, #0]
 80029c8:	4610      	mov	r0, r2
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	6811      	ldr	r1, [r2, #0]
 80029ce:	ea43 0200 	orr.w	r2, r3, r0
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	440b      	add	r3, r1
 80029d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80029dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3303      	adds	r3, #3
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	061a      	lsls	r2, r3, #24
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3302      	adds	r3, #2
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3301      	adds	r3, #1
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	4313      	orrs	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	4610      	mov	r0, r2
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	6811      	ldr	r1, [r2, #0]
 8002a04:	ea43 0200 	orr.w	r2, r3, r0
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a12:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3318      	adds	r3, #24
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	4413      	add	r3, r2
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	6811      	ldr	r1, [r2, #0]
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	3318      	adds	r3, #24
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	440b      	add	r3, r1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e00e      	b.n	8002a56 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e006      	b.n	8002a56 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
  }
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a74:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d002      	beq.n	8002a82 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002a7c:	7afb      	ldrb	r3, [r7, #11]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d11d      	bne.n	8002abe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3301      	adds	r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3301      	adds	r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002abe:	68fb      	ldr	r3, [r7, #12]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d003      	beq.n	8002af0 <HAL_CAN_GetRxMessage+0x24>
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	f040 80f3 	bne.w	8002cd6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10e      	bne.n	8002b14 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d116      	bne.n	8002b32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0e7      	b.n	8002ce4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d107      	bne.n	8002b32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0d8      	b.n	8002ce4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	331b      	adds	r3, #27
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	4413      	add	r3, r2
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0204 	and.w	r2, r3, #4
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10c      	bne.n	8002b6a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	331b      	adds	r3, #27
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4413      	add	r3, r2
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0d5b      	lsrs	r3, r3, #21
 8002b60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e00b      	b.n	8002b82 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	331b      	adds	r3, #27
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	4413      	add	r3, r2
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	08db      	lsrs	r3, r3, #3
 8002b7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	331b      	adds	r3, #27
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	4413      	add	r3, r2
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0202 	and.w	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	331b      	adds	r3, #27
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 020f 	and.w	r2, r3, #15
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	331b      	adds	r3, #27
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	4413      	add	r3, r2
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0a1b      	lsrs	r3, r3, #8
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	331b      	adds	r3, #27
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0a1a      	lsrs	r2, r3, #8
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0c1a      	lsrs	r2, r3, #16
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	3302      	adds	r3, #2
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0e1a      	lsrs	r2, r3, #24
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	3303      	adds	r3, #3
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	3304      	adds	r3, #4
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0a1a      	lsrs	r2, r3, #8
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	3305      	adds	r3, #5
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0c1a      	lsrs	r2, r3, #16
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	3306      	adds	r3, #6
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0e1a      	lsrs	r2, r3, #24
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	3307      	adds	r3, #7
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0220 	orr.w	r2, r2, #32
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	e007      	b.n	8002cd2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0220 	orr.w	r2, r2, #32
 8002cd0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e006      	b.n	8002ce4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d04:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d06:	7afb      	ldrb	r3, [r7, #11]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d002      	beq.n	8002d12 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002d0c:	7afb      	ldrb	r3, [r7, #11]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d10f      	bne.n	8002d32 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d106      	bne.n	8002d26 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e005      	b.n	8002d32 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d50:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d002      	beq.n	8002d5e <HAL_CAN_ActivateNotification+0x1e>
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d109      	bne.n	8002d72 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6959      	ldr	r1, [r3, #20]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e006      	b.n	8002d80 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d9c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d002      	beq.n	8002daa <HAL_CAN_DeactivateNotification+0x1e>
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d10a      	bne.n	8002dc0 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6959      	ldr	r1, [r3, #20]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	43da      	mvns	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	400a      	ands	r2, r1
 8002dba:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e006      	b.n	8002dce <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b08a      	sub	sp, #40	; 0x28
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d07c      	beq.n	8002f1a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d023      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7fe ff09 	bl	8001c54 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e42:	e016      	b.n	8002e72 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
 8002e56:	e00c      	b.n	8002e72 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	e002      	b.n	8002e72 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7fe ff12 	bl	8001c96 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d024      	beq.n	8002ec6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fe feea 	bl	8001c6a <HAL_CAN_TxMailbox1CompleteCallback>
 8002e96:	e016      	b.n	8002ec6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eaa:	e00c      	b.n	8002ec6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	e002      	b.n	8002ec6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7fe fef3 	bl	8001cac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d024      	beq.n	8002f1a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ed8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7fe fecb 	bl	8001c80 <HAL_CAN_TxMailbox2CompleteCallback>
 8002eea:	e016      	b.n	8002f1a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
 8002efe:	e00c      	b.n	8002f1a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	e002      	b.n	8002f1a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7fe fed4 	bl	8001cc2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00c      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2208      	movs	r2, #8
 8002f58:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8f4 	bl	8003148 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fe fcdd 	bl	8001938 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00c      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2208      	movs	r2, #8
 8002fbc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f8cc 	bl	800315c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7fe fcb7 	bl	8001950 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f8b6 	bl	8003170 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2208      	movs	r2, #8
 800301e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8af 	bl	8003184 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d07b      	beq.n	8003128 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d072      	beq.n	8003120 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	f043 0304 	orr.w	r3, r3, #4
 800308c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003094:	2b00      	cmp	r3, #0
 8003096:	d043      	beq.n	8003120 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d03e      	beq.n	8003120 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a8:	2b60      	cmp	r3, #96	; 0x60
 80030aa:	d02b      	beq.n	8003104 <HAL_CAN_IRQHandler+0x32a>
 80030ac:	2b60      	cmp	r3, #96	; 0x60
 80030ae:	d82e      	bhi.n	800310e <HAL_CAN_IRQHandler+0x334>
 80030b0:	2b50      	cmp	r3, #80	; 0x50
 80030b2:	d022      	beq.n	80030fa <HAL_CAN_IRQHandler+0x320>
 80030b4:	2b50      	cmp	r3, #80	; 0x50
 80030b6:	d82a      	bhi.n	800310e <HAL_CAN_IRQHandler+0x334>
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d019      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x316>
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d826      	bhi.n	800310e <HAL_CAN_IRQHandler+0x334>
 80030c0:	2b30      	cmp	r3, #48	; 0x30
 80030c2:	d010      	beq.n	80030e6 <HAL_CAN_IRQHandler+0x30c>
 80030c4:	2b30      	cmp	r3, #48	; 0x30
 80030c6:	d822      	bhi.n	800310e <HAL_CAN_IRQHandler+0x334>
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d002      	beq.n	80030d2 <HAL_CAN_IRQHandler+0x2f8>
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d005      	beq.n	80030dc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030d0:	e01d      	b.n	800310e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030da:	e019      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	f043 0310 	orr.w	r3, r3, #16
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030e4:	e014      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	f043 0320 	orr.w	r3, r3, #32
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ee:	e00f      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030f8:	e00a      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003102:	e005      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800310c:	e000      	b.n	8003110 <HAL_CAN_IRQHandler+0x336>
            break;
 800310e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800311e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2204      	movs	r2, #4
 8003126:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f82c 	bl	8003198 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003140:	bf00      	nop
 8003142:	3728      	adds	r7, #40	; 0x28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <__NVIC_SetPriorityGrouping+0x40>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c8:	4013      	ands	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031da:	4a04      	ldr	r2, [pc, #16]	; (80031ec <__NVIC_SetPriorityGrouping+0x40>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60d3      	str	r3, [r2, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00
 80031f0:	05fa0000 	.word	0x05fa0000

080031f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <__NVIC_GetPriorityGrouping+0x18>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0307 	and.w	r3, r3, #7
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db0b      	blt.n	800323a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4907      	ldr	r1, [pc, #28]	; (8003248 <__NVIC_EnableIRQ+0x38>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2001      	movs	r0, #1
 8003232:	fa00 f202 	lsl.w	r2, r0, r2
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000e100 	.word	0xe000e100

0800324c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325c:	2b00      	cmp	r3, #0
 800325e:	db0a      	blt.n	8003276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	490c      	ldr	r1, [pc, #48]	; (8003298 <__NVIC_SetPriority+0x4c>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	440b      	add	r3, r1
 8003270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003274:	e00a      	b.n	800328c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4908      	ldr	r1, [pc, #32]	; (800329c <__NVIC_SetPriority+0x50>)
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3b04      	subs	r3, #4
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	440b      	add	r3, r1
 800328a:	761a      	strb	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f1c3 0307 	rsb	r3, r3, #7
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	bf28      	it	cs
 80032be:	2304      	movcs	r3, #4
 80032c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d902      	bls.n	80032d0 <NVIC_EncodePriority+0x30>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3b03      	subs	r3, #3
 80032ce:	e000      	b.n	80032d2 <NVIC_EncodePriority+0x32>
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	401a      	ands	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	4313      	orrs	r3, r2
         );
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ff4c 	bl	80031ac <__NVIC_SetPriorityGrouping>
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800332e:	f7ff ff61 	bl	80031f4 <__NVIC_GetPriorityGrouping>
 8003332:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	6978      	ldr	r0, [r7, #20]
 800333a:	f7ff ffb1 	bl	80032a0 <NVIC_EncodePriority>
 800333e:	4602      	mov	r2, r0
 8003340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff80 	bl	800324c <__NVIC_SetPriority>
}
 800334c:	bf00      	nop
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff54 	bl	8003210 <__NVIC_EnableIRQ>
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003370:	b480      	push	{r7}
 8003372:	b089      	sub	sp, #36	; 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	e175      	b.n	800367c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003390:	2201      	movs	r2, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4013      	ands	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	f040 8164 	bne.w	8003676 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d00b      	beq.n	80033ce <HAL_GPIO_Init+0x5e>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c2:	2b11      	cmp	r3, #17
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b12      	cmp	r3, #18
 80033cc:	d130      	bne.n	8003430 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003404:	2201      	movs	r2, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 0201 	and.w	r2, r3, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	2203      	movs	r2, #3
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x100>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b12      	cmp	r3, #18
 800346e:	d123      	bne.n	80034b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	08da      	lsrs	r2, r3, #3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3208      	adds	r2, #8
 8003478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	220f      	movs	r2, #15
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	08da      	lsrs	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	69b9      	ldr	r1, [r7, #24]
 80034b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0203 	and.w	r2, r3, #3
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80be 	beq.w	8003676 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fa:	4b66      	ldr	r3, [pc, #408]	; (8003694 <HAL_GPIO_Init+0x324>)
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	4a65      	ldr	r2, [pc, #404]	; (8003694 <HAL_GPIO_Init+0x324>)
 8003500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003504:	6453      	str	r3, [r2, #68]	; 0x44
 8003506:	4b63      	ldr	r3, [pc, #396]	; (8003694 <HAL_GPIO_Init+0x324>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003512:	4a61      	ldr	r2, [pc, #388]	; (8003698 <HAL_GPIO_Init+0x328>)
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	3302      	adds	r3, #2
 800351a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	220f      	movs	r2, #15
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a58      	ldr	r2, [pc, #352]	; (800369c <HAL_GPIO_Init+0x32c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d037      	beq.n	80035ae <HAL_GPIO_Init+0x23e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a57      	ldr	r2, [pc, #348]	; (80036a0 <HAL_GPIO_Init+0x330>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d031      	beq.n	80035aa <HAL_GPIO_Init+0x23a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a56      	ldr	r2, [pc, #344]	; (80036a4 <HAL_GPIO_Init+0x334>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d02b      	beq.n	80035a6 <HAL_GPIO_Init+0x236>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a55      	ldr	r2, [pc, #340]	; (80036a8 <HAL_GPIO_Init+0x338>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d025      	beq.n	80035a2 <HAL_GPIO_Init+0x232>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a54      	ldr	r2, [pc, #336]	; (80036ac <HAL_GPIO_Init+0x33c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01f      	beq.n	800359e <HAL_GPIO_Init+0x22e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a53      	ldr	r2, [pc, #332]	; (80036b0 <HAL_GPIO_Init+0x340>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d019      	beq.n	800359a <HAL_GPIO_Init+0x22a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_GPIO_Init+0x344>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <HAL_GPIO_Init+0x226>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a51      	ldr	r2, [pc, #324]	; (80036b8 <HAL_GPIO_Init+0x348>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00d      	beq.n	8003592 <HAL_GPIO_Init+0x222>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a50      	ldr	r2, [pc, #320]	; (80036bc <HAL_GPIO_Init+0x34c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <HAL_GPIO_Init+0x21e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4f      	ldr	r2, [pc, #316]	; (80036c0 <HAL_GPIO_Init+0x350>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_GPIO_Init+0x21a>
 8003586:	2309      	movs	r3, #9
 8003588:	e012      	b.n	80035b0 <HAL_GPIO_Init+0x240>
 800358a:	230a      	movs	r3, #10
 800358c:	e010      	b.n	80035b0 <HAL_GPIO_Init+0x240>
 800358e:	2308      	movs	r3, #8
 8003590:	e00e      	b.n	80035b0 <HAL_GPIO_Init+0x240>
 8003592:	2307      	movs	r3, #7
 8003594:	e00c      	b.n	80035b0 <HAL_GPIO_Init+0x240>
 8003596:	2306      	movs	r3, #6
 8003598:	e00a      	b.n	80035b0 <HAL_GPIO_Init+0x240>
 800359a:	2305      	movs	r3, #5
 800359c:	e008      	b.n	80035b0 <HAL_GPIO_Init+0x240>
 800359e:	2304      	movs	r3, #4
 80035a0:	e006      	b.n	80035b0 <HAL_GPIO_Init+0x240>
 80035a2:	2303      	movs	r3, #3
 80035a4:	e004      	b.n	80035b0 <HAL_GPIO_Init+0x240>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e002      	b.n	80035b0 <HAL_GPIO_Init+0x240>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_GPIO_Init+0x240>
 80035ae:	2300      	movs	r3, #0
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	f002 0203 	and.w	r2, r2, #3
 80035b6:	0092      	lsls	r2, r2, #2
 80035b8:	4093      	lsls	r3, r2
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035c0:	4935      	ldr	r1, [pc, #212]	; (8003698 <HAL_GPIO_Init+0x328>)
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	3302      	adds	r3, #2
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_GPIO_Init+0x354>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035f2:	4a34      	ldr	r2, [pc, #208]	; (80036c4 <HAL_GPIO_Init+0x354>)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035f8:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <HAL_GPIO_Init+0x354>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800361c:	4a29      	ldr	r2, [pc, #164]	; (80036c4 <HAL_GPIO_Init+0x354>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003622:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <HAL_GPIO_Init+0x354>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003646:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <HAL_GPIO_Init+0x354>)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_GPIO_Init+0x354>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003670:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <HAL_GPIO_Init+0x354>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3301      	adds	r3, #1
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b0f      	cmp	r3, #15
 8003680:	f67f ae86 	bls.w	8003390 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3724      	adds	r7, #36	; 0x24
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	40013800 	.word	0x40013800
 800369c:	40020000 	.word	0x40020000
 80036a0:	40020400 	.word	0x40020400
 80036a4:	40020800 	.word	0x40020800
 80036a8:	40020c00 	.word	0x40020c00
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40021400 	.word	0x40021400
 80036b4:	40021800 	.word	0x40021800
 80036b8:	40021c00 	.word	0x40021c00
 80036bc:	40022000 	.word	0x40022000
 80036c0:	40022400 	.word	0x40022400
 80036c4:	40013c00 	.word	0x40013c00

080036c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
 80036d4:	4613      	mov	r3, r2
 80036d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d8:	787b      	ldrb	r3, [r7, #1]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036e4:	e003      	b.n	80036ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	041a      	lsls	r2, r3, #16
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	619a      	str	r2, [r3, #24]
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	4b23      	ldr	r3, [pc, #140]	; (8003794 <HAL_PWREx_EnableOverDrive+0x98>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	4a22      	ldr	r2, [pc, #136]	; (8003794 <HAL_PWREx_EnableOverDrive+0x98>)
 800370c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003710:	6413      	str	r3, [r2, #64]	; 0x40
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_PWREx_EnableOverDrive+0x98>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800371e:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800372a:	f7fe fbe3 	bl	8001ef4 <HAL_GetTick>
 800372e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003730:	e009      	b.n	8003746 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003732:	f7fe fbdf 	bl	8001ef4 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003740:	d901      	bls.n	8003746 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e022      	b.n	800378c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003746:	4b14      	ldr	r3, [pc, #80]	; (8003798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003752:	d1ee      	bne.n	8003732 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <HAL_PWREx_EnableOverDrive+0x9c>)
 800375a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003760:	f7fe fbc8 	bl	8001ef4 <HAL_GetTick>
 8003764:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003766:	e009      	b.n	800377c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003768:	f7fe fbc4 	bl	8001ef4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003776:	d901      	bls.n	800377c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e007      	b.n	800378c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_PWREx_EnableOverDrive+0x9c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003788:	d1ee      	bne.n	8003768 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	40007000 	.word	0x40007000

0800379c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e291      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8087 	beq.w	80038ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c0:	4b96      	ldr	r3, [pc, #600]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d00c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037cc:	4b93      	ldr	r3, [pc, #588]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d112      	bne.n	80037fe <HAL_RCC_OscConfig+0x62>
 80037d8:	4b90      	ldr	r3, [pc, #576]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e4:	d10b      	bne.n	80037fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e6:	4b8d      	ldr	r3, [pc, #564]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d06c      	beq.n	80038cc <HAL_RCC_OscConfig+0x130>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d168      	bne.n	80038cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e26b      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x7a>
 8003808:	4b84      	ldr	r3, [pc, #528]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a83      	ldr	r2, [pc, #524]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	e02e      	b.n	8003874 <HAL_RCC_OscConfig+0xd8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x9c>
 800381e:	4b7f      	ldr	r3, [pc, #508]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7e      	ldr	r2, [pc, #504]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b7c      	ldr	r3, [pc, #496]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7b      	ldr	r2, [pc, #492]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e01d      	b.n	8003874 <HAL_RCC_OscConfig+0xd8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0xc0>
 8003842:	4b76      	ldr	r3, [pc, #472]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a75      	ldr	r2, [pc, #468]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b73      	ldr	r3, [pc, #460]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a72      	ldr	r2, [pc, #456]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0xd8>
 800385c:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6e      	ldr	r2, [pc, #440]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b6c      	ldr	r3, [pc, #432]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6b      	ldr	r2, [pc, #428]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fe fb3a 	bl	8001ef4 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003884:	f7fe fb36 	bl	8001ef4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e21f      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b61      	ldr	r3, [pc, #388]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0xe8>
 80038a2:	e014      	b.n	80038ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe fb26 	bl	8001ef4 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fe fb22 	bl	8001ef4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e20b      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	4b57      	ldr	r3, [pc, #348]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x110>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d069      	beq.n	80039ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038da:	4b50      	ldr	r3, [pc, #320]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e6:	4b4d      	ldr	r3, [pc, #308]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d11c      	bne.n	800392c <HAL_RCC_OscConfig+0x190>
 80038f2:	4b4a      	ldr	r3, [pc, #296]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d116      	bne.n	800392c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fe:	4b47      	ldr	r3, [pc, #284]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_RCC_OscConfig+0x17a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d001      	beq.n	8003916 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e1df      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003916:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	493d      	ldr	r1, [pc, #244]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	e040      	b.n	80039ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d023      	beq.n	800397c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003934:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a38      	ldr	r2, [pc, #224]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fe fad8 	bl	8001ef4 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003948:	f7fe fad4 	bl	8001ef4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e1bd      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395a:	4b30      	ldr	r3, [pc, #192]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003966:	4b2d      	ldr	r3, [pc, #180]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4929      	ldr	r1, [pc, #164]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
 800397a:	e018      	b.n	80039ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397c:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe fab4 	bl	8001ef4 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003990:	f7fe fab0 	bl	8001ef4 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e199      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a2:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d038      	beq.n	8003a2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d019      	beq.n	80039f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c2:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80039c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c6:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ce:	f7fe fa91 	bl	8001ef4 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fe fa8d 	bl	8001ef4 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e176      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x23a>
 80039f4:	e01a      	b.n	8003a2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80039f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fa:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <HAL_RCC_OscConfig+0x280>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a02:	f7fe fa77 	bl	8001ef4 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a08:	e00a      	b.n	8003a20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0a:	f7fe fa73 	bl	8001ef4 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d903      	bls.n	8003a20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e15c      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
 8003a1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a20:	4b91      	ldr	r3, [pc, #580]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ee      	bne.n	8003a0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80a4 	beq.w	8003b82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3a:	4b8b      	ldr	r3, [pc, #556]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10d      	bne.n	8003a62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	4b88      	ldr	r3, [pc, #544]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	4a87      	ldr	r2, [pc, #540]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6413      	str	r3, [r2, #64]	; 0x40
 8003a52:	4b85      	ldr	r3, [pc, #532]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a62:	4b82      	ldr	r3, [pc, #520]	; (8003c6c <HAL_RCC_OscConfig+0x4d0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d118      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a6e:	4b7f      	ldr	r3, [pc, #508]	; (8003c6c <HAL_RCC_OscConfig+0x4d0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a7e      	ldr	r2, [pc, #504]	; (8003c6c <HAL_RCC_OscConfig+0x4d0>)
 8003a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7a:	f7fe fa3b 	bl	8001ef4 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a82:	f7fe fa37 	bl	8001ef4 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b64      	cmp	r3, #100	; 0x64
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e120      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a94:	4b75      	ldr	r3, [pc, #468]	; (8003c6c <HAL_RCC_OscConfig+0x4d0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x31a>
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a6e      	ldr	r2, [pc, #440]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab4:	e02d      	b.n	8003b12 <HAL_RCC_OscConfig+0x376>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x33c>
 8003abe:	4b6a      	ldr	r3, [pc, #424]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	4a69      	ldr	r2, [pc, #420]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aca:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	4a66      	ldr	r2, [pc, #408]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad6:	e01c      	b.n	8003b12 <HAL_RCC_OscConfig+0x376>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b05      	cmp	r3, #5
 8003ade:	d10c      	bne.n	8003afa <HAL_RCC_OscConfig+0x35e>
 8003ae0:	4b61      	ldr	r3, [pc, #388]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	4a60      	ldr	r2, [pc, #384]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	6713      	str	r3, [r2, #112]	; 0x70
 8003aec:	4b5e      	ldr	r3, [pc, #376]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	4a5d      	ldr	r2, [pc, #372]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6713      	str	r3, [r2, #112]	; 0x70
 8003af8:	e00b      	b.n	8003b12 <HAL_RCC_OscConfig+0x376>
 8003afa:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	4a5a      	ldr	r2, [pc, #360]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6713      	str	r3, [r2, #112]	; 0x70
 8003b06:	4b58      	ldr	r3, [pc, #352]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	4a57      	ldr	r2, [pc, #348]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003b0c:	f023 0304 	bic.w	r3, r3, #4
 8003b10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d015      	beq.n	8003b46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1a:	f7fe f9eb 	bl	8001ef4 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b20:	e00a      	b.n	8003b38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b22:	f7fe f9e7 	bl	8001ef4 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e0ce      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b38:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ee      	beq.n	8003b22 <HAL_RCC_OscConfig+0x386>
 8003b44:	e014      	b.n	8003b70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b46:	f7fe f9d5 	bl	8001ef4 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fe f9d1 	bl	8001ef4 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e0b8      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b64:	4b40      	ldr	r3, [pc, #256]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ee      	bne.n	8003b4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80a4 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d06b      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d149      	bne.n	8003c34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba0:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a30      	ldr	r2, [pc, #192]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe f9a2 	bl	8001ef4 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb4:	f7fe f99e 	bl	8001ef4 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e087      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc6:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	019b      	lsls	r3, r3, #6
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	3b01      	subs	r3, #1
 8003bec:	041b      	lsls	r3, r3, #16
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003bfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bfe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c00:	4b19      	ldr	r3, [pc, #100]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe f972 	bl	8001ef4 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fe f96e 	bl	8001ef4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e057      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x478>
 8003c32:	e04f      	b.n	8003cd4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0b      	ldr	r2, [pc, #44]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe f958 	bl	8001ef4 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fe f954 	bl	8001ef4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e03d      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5a:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4ac>
 8003c66:	e035      	b.n	8003cd4 <HAL_RCC_OscConfig+0x538>
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <HAL_RCC_OscConfig+0x544>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d028      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d121      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d11a      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ca6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d111      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	085b      	lsrs	r3, r3, #1
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d107      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800

08003ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0d0      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cfc:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d910      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0a:	4b67      	ldr	r3, [pc, #412]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 020f 	bic.w	r2, r3, #15
 8003d12:	4965      	ldr	r1, [pc, #404]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b8      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d44:	4b59      	ldr	r3, [pc, #356]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a58      	ldr	r2, [pc, #352]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4a52      	ldr	r2, [pc, #328]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b50      	ldr	r3, [pc, #320]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	494d      	ldr	r1, [pc, #308]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d040      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d115      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	4b41      	ldr	r3, [pc, #260]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e073      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e06b      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dc6:	4b39      	ldr	r3, [pc, #228]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f023 0203 	bic.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4936      	ldr	r1, [pc, #216]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd8:	f7fe f88c 	bl	8001ef4 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de0:	f7fe f888 	bl	8001ef4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e053      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 020c 	and.w	r2, r3, #12
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d1eb      	bne.n	8003de0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e08:	4b27      	ldr	r3, [pc, #156]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d210      	bcs.n	8003e38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 020f 	bic.w	r2, r3, #15
 8003e1e:	4922      	ldr	r1, [pc, #136]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e032      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4916      	ldr	r1, [pc, #88]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	490e      	ldr	r1, [pc, #56]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e76:	f000 f821 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	490a      	ldr	r1, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x1cc>)
 8003e88:	5ccb      	ldrb	r3, [r1, r3]
 8003e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1d0>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1d4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fb7c 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023c00 	.word	0x40023c00
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	08006a90 	.word	0x08006a90
 8003eb4:	20000028 	.word	0x20000028
 8003eb8:	200000f4 	.word	0x200000f4

08003ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	b5b0      	push	{r4, r5, r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	6079      	str	r1, [r7, #4]
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	60f9      	str	r1, [r7, #12]
 8003eca:	2100      	movs	r1, #0
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003ece:	2100      	movs	r1, #0
 8003ed0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed2:	4952      	ldr	r1, [pc, #328]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003ed4:	6889      	ldr	r1, [r1, #8]
 8003ed6:	f001 010c 	and.w	r1, r1, #12
 8003eda:	2908      	cmp	r1, #8
 8003edc:	d00d      	beq.n	8003efa <HAL_RCC_GetSysClockFreq+0x3e>
 8003ede:	2908      	cmp	r1, #8
 8003ee0:	f200 8094 	bhi.w	800400c <HAL_RCC_GetSysClockFreq+0x150>
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x32>
 8003ee8:	2904      	cmp	r1, #4
 8003eea:	d003      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x38>
 8003eec:	e08e      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eee:	4b4c      	ldr	r3, [pc, #304]	; (8004020 <HAL_RCC_GetSysClockFreq+0x164>)
 8003ef0:	60bb      	str	r3, [r7, #8]
      break;
 8003ef2:	e08e      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	; (8004024 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ef6:	60bb      	str	r3, [r7, #8]
      break;
 8003ef8:	e08b      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003efa:	4948      	ldr	r1, [pc, #288]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003efc:	6849      	ldr	r1, [r1, #4]
 8003efe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003f02:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f04:	4945      	ldr	r1, [pc, #276]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f06:	6849      	ldr	r1, [r1, #4]
 8003f08:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	d024      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f10:	4942      	ldr	r1, [pc, #264]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f12:	6849      	ldr	r1, [r1, #4]
 8003f14:	0989      	lsrs	r1, r1, #6
 8003f16:	4608      	mov	r0, r1
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003f20:	f04f 0500 	mov.w	r5, #0
 8003f24:	ea00 0204 	and.w	r2, r0, r4
 8003f28:	ea01 0305 	and.w	r3, r1, r5
 8003f2c:	493d      	ldr	r1, [pc, #244]	; (8004024 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f2e:	fb01 f003 	mul.w	r0, r1, r3
 8003f32:	2100      	movs	r1, #0
 8003f34:	fb01 f102 	mul.w	r1, r1, r2
 8003f38:	1844      	adds	r4, r0, r1
 8003f3a:	493a      	ldr	r1, [pc, #232]	; (8004024 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f3c:	fba2 0101 	umull	r0, r1, r2, r1
 8003f40:	1863      	adds	r3, r4, r1
 8003f42:	4619      	mov	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	f7fc f960 	bl	8000210 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e04a      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	461a      	mov	r2, r3
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	ea02 0400 	and.w	r4, r2, r0
 8003f72:	ea03 0501 	and.w	r5, r3, r1
 8003f76:	4620      	mov	r0, r4
 8003f78:	4629      	mov	r1, r5
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	014b      	lsls	r3, r1, #5
 8003f84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f88:	0142      	lsls	r2, r0, #5
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	1b00      	subs	r0, r0, r4
 8003f90:	eb61 0105 	sbc.w	r1, r1, r5
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	018b      	lsls	r3, r1, #6
 8003f9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fa2:	0182      	lsls	r2, r0, #6
 8003fa4:	1a12      	subs	r2, r2, r0
 8003fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003faa:	f04f 0000 	mov.w	r0, #0
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	00d9      	lsls	r1, r3, #3
 8003fb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fb8:	00d0      	lsls	r0, r2, #3
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	1912      	adds	r2, r2, r4
 8003fc0:	eb45 0303 	adc.w	r3, r5, r3
 8003fc4:	f04f 0000 	mov.w	r0, #0
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	0299      	lsls	r1, r3, #10
 8003fce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fd2:	0290      	lsls	r0, r2, #10
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	f7fc f914 	bl	8000210 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4613      	mov	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	60bb      	str	r3, [r7, #8]
      break;
 800400a:	e002      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <HAL_RCC_GetSysClockFreq+0x164>)
 800400e:	60bb      	str	r3, [r7, #8]
      break;
 8004010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004012:	68bb      	ldr	r3, [r7, #8]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bdb0      	pop	{r4, r5, r7, pc}
 800401c:	40023800 	.word	0x40023800
 8004020:	00f42400 	.word	0x00f42400
 8004024:	016e3600 	.word	0x016e3600

08004028 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCC_GetHCLKFreq+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000028 	.word	0x20000028

08004040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004044:	f7ff fff0 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 8004048:	4602      	mov	r2, r0
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	0a9b      	lsrs	r3, r3, #10
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	4903      	ldr	r1, [pc, #12]	; (8004064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800405c:	4618      	mov	r0, r3
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	08006aa0 	.word	0x08006aa0

08004068 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	220f      	movs	r2, #15
 8004076:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004078:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <HAL_RCC_GetClockConfig+0x5c>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0203 	and.w	r2, r3, #3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004084:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004090:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_RCC_GetClockConfig+0x5c>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	08db      	lsrs	r3, r3, #3
 80040a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040aa:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <HAL_RCC_GetClockConfig+0x60>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 020f 	and.w	r2, r3, #15
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	601a      	str	r2, [r3, #0]
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40023c00 	.word	0x40023c00

080040cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e049      	b.n	8004172 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fd f9c0 	bl	8001478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f000 fd28 	bl	8004b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d001      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e054      	b.n	800423e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a26      	ldr	r2, [pc, #152]	; (800424c <HAL_TIM_Base_Start_IT+0xd0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d022      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0x80>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041be:	d01d      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0x80>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a22      	ldr	r2, [pc, #136]	; (8004250 <HAL_TIM_Base_Start_IT+0xd4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d018      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0x80>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a21      	ldr	r2, [pc, #132]	; (8004254 <HAL_TIM_Base_Start_IT+0xd8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0x80>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <HAL_TIM_Base_Start_IT+0xdc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00e      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0x80>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1e      	ldr	r2, [pc, #120]	; (800425c <HAL_TIM_Base_Start_IT+0xe0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d009      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0x80>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1c      	ldr	r2, [pc, #112]	; (8004260 <HAL_TIM_Base_Start_IT+0xe4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0x80>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <HAL_TIM_Base_Start_IT+0xe8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d115      	bne.n	8004228 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_TIM_Base_Start_IT+0xec>)
 8004204:	4013      	ands	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b06      	cmp	r3, #6
 800420c:	d015      	beq.n	800423a <HAL_TIM_Base_Start_IT+0xbe>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004214:	d011      	beq.n	800423a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004226:	e008      	b.n	800423a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e000      	b.n	800423c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40010400 	.word	0x40010400
 8004260:	40014000 	.word	0x40014000
 8004264:	40001800 	.word	0x40001800
 8004268:	00010007 	.word	0x00010007

0800426c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e049      	b.n	8004312 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f841 	bl	800431a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f000 fc58 	bl	8004b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <HAL_TIM_PWM_Start+0x24>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e03c      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d109      	bne.n	800436e <HAL_TIM_PWM_Start+0x3e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	bf14      	ite	ne
 8004366:	2301      	movne	r3, #1
 8004368:	2300      	moveq	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	e02f      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d109      	bne.n	8004388 <HAL_TIM_PWM_Start+0x58>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e022      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	d109      	bne.n	80043a2 <HAL_TIM_PWM_Start+0x72>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	bf14      	ite	ne
 800439a:	2301      	movne	r3, #1
 800439c:	2300      	moveq	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	e015      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d109      	bne.n	80043bc <HAL_TIM_PWM_Start+0x8c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e008      	b.n	80043ce <HAL_TIM_PWM_Start+0x9e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e092      	b.n	80044fc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Start+0xb6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e4:	e023      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xc6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f4:	e01b      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_PWM_Start+0xd6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004404:	e013      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0xe6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004414:	e00b      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b10      	cmp	r3, #16
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0xf6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004424:	e003      	b.n	800442e <HAL_TIM_PWM_Start+0xfe>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2201      	movs	r2, #1
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 ff2a 	bl	8005290 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a30      	ldr	r2, [pc, #192]	; (8004504 <HAL_TIM_PWM_Start+0x1d4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_TIM_PWM_Start+0x120>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2f      	ldr	r2, [pc, #188]	; (8004508 <HAL_TIM_PWM_Start+0x1d8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_TIM_PWM_Start+0x124>
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <HAL_TIM_PWM_Start+0x126>
 8004454:	2300      	movs	r3, #0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a25      	ldr	r2, [pc, #148]	; (8004504 <HAL_TIM_PWM_Start+0x1d4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d022      	beq.n	80044ba <HAL_TIM_PWM_Start+0x18a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447c:	d01d      	beq.n	80044ba <HAL_TIM_PWM_Start+0x18a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a22      	ldr	r2, [pc, #136]	; (800450c <HAL_TIM_PWM_Start+0x1dc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d018      	beq.n	80044ba <HAL_TIM_PWM_Start+0x18a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a20      	ldr	r2, [pc, #128]	; (8004510 <HAL_TIM_PWM_Start+0x1e0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <HAL_TIM_PWM_Start+0x18a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1f      	ldr	r2, [pc, #124]	; (8004514 <HAL_TIM_PWM_Start+0x1e4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00e      	beq.n	80044ba <HAL_TIM_PWM_Start+0x18a>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a19      	ldr	r2, [pc, #100]	; (8004508 <HAL_TIM_PWM_Start+0x1d8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d009      	beq.n	80044ba <HAL_TIM_PWM_Start+0x18a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <HAL_TIM_PWM_Start+0x1e8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d004      	beq.n	80044ba <HAL_TIM_PWM_Start+0x18a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a19      	ldr	r2, [pc, #100]	; (800451c <HAL_TIM_PWM_Start+0x1ec>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d115      	bne.n	80044e6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <HAL_TIM_PWM_Start+0x1f0>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b06      	cmp	r3, #6
 80044ca:	d015      	beq.n	80044f8 <HAL_TIM_PWM_Start+0x1c8>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d2:	d011      	beq.n	80044f8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e4:	e008      	b.n	80044f8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e000      	b.n	80044fa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40010000 	.word	0x40010000
 8004508:	40010400 	.word	0x40010400
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800
 8004514:	40000c00 	.word	0x40000c00
 8004518:	40014000 	.word	0x40014000
 800451c:	40001800 	.word	0x40001800
 8004520:	00010007 	.word	0x00010007

08004524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d122      	bne.n	8004580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b02      	cmp	r3, #2
 8004546:	d11b      	bne.n	8004580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0202 	mvn.w	r2, #2
 8004550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fadc 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 face 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fadf 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b04      	cmp	r3, #4
 800458c:	d122      	bne.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b04      	cmp	r3, #4
 800459a:	d11b      	bne.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0204 	mvn.w	r2, #4
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fab2 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 faa4 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fab5 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d122      	bne.n	8004628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0208 	mvn.w	r2, #8
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa88 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa7a 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fa8b 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b10      	cmp	r3, #16
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b10      	cmp	r3, #16
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0210 	mvn.w	r2, #16
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2208      	movs	r2, #8
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fa5e 	bl	8004b24 <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa50 	bl	8004b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fa61 	bl	8004b38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0201 	mvn.w	r2, #1
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc fdaa 	bl	80011fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	2b80      	cmp	r3, #128	; 0x80
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 ff1a 	bl	8005508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e2:	d10e      	bne.n	8004702 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ee:	2b80      	cmp	r3, #128	; 0x80
 80046f0:	d107      	bne.n	8004702 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 ff0d 	bl	800551c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	2b40      	cmp	r3, #64	; 0x40
 800470e:	d10e      	bne.n	800472e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471a:	2b40      	cmp	r3, #64	; 0x40
 800471c:	d107      	bne.n	800472e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fa0f 	bl	8004b4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b20      	cmp	r3, #32
 800473a:	d10e      	bne.n	800475a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b20      	cmp	r3, #32
 8004748:	d107      	bne.n	800475a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f06f 0220 	mvn.w	r2, #32
 8004752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fecd 	bl	80054f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800477a:	2302      	movs	r3, #2
 800477c:	e0fd      	b.n	800497a <HAL_TIM_PWM_ConfigChannel+0x216>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b14      	cmp	r3, #20
 800478a:	f200 80f0 	bhi.w	800496e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800478e:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	080047e9 	.word	0x080047e9
 8004798:	0800496f 	.word	0x0800496f
 800479c:	0800496f 	.word	0x0800496f
 80047a0:	0800496f 	.word	0x0800496f
 80047a4:	08004829 	.word	0x08004829
 80047a8:	0800496f 	.word	0x0800496f
 80047ac:	0800496f 	.word	0x0800496f
 80047b0:	0800496f 	.word	0x0800496f
 80047b4:	0800486b 	.word	0x0800486b
 80047b8:	0800496f 	.word	0x0800496f
 80047bc:	0800496f 	.word	0x0800496f
 80047c0:	0800496f 	.word	0x0800496f
 80047c4:	080048ab 	.word	0x080048ab
 80047c8:	0800496f 	.word	0x0800496f
 80047cc:	0800496f 	.word	0x0800496f
 80047d0:	0800496f 	.word	0x0800496f
 80047d4:	080048ed 	.word	0x080048ed
 80047d8:	0800496f 	.word	0x0800496f
 80047dc:	0800496f 	.word	0x0800496f
 80047e0:	0800496f 	.word	0x0800496f
 80047e4:	0800492d 	.word	0x0800492d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fa56 	bl	8004ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0208 	orr.w	r2, r2, #8
 8004802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0204 	bic.w	r2, r2, #4
 8004812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6999      	ldr	r1, [r3, #24]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	619a      	str	r2, [r3, #24]
      break;
 8004826:	e0a3      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 faa8 	bl	8004d84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6999      	ldr	r1, [r3, #24]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	021a      	lsls	r2, r3, #8
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	619a      	str	r2, [r3, #24]
      break;
 8004868:	e082      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 faff 	bl	8004e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0208 	orr.w	r2, r2, #8
 8004884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0204 	bic.w	r2, r2, #4
 8004894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69d9      	ldr	r1, [r3, #28]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	61da      	str	r2, [r3, #28]
      break;
 80048a8:	e062      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fb55 	bl	8004f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69da      	ldr	r2, [r3, #28]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69d9      	ldr	r1, [r3, #28]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	021a      	lsls	r2, r3, #8
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	61da      	str	r2, [r3, #28]
      break;
 80048ea:	e041      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fb8c 	bl	8005010 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0208 	orr.w	r2, r2, #8
 8004906:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0204 	bic.w	r2, r2, #4
 8004916:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800492a:	e021      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fbbe 	bl	80050b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004946:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	021a      	lsls	r2, r3, #8
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800496c:	e000      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800496e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop

08004984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_TIM_ConfigClockSource+0x18>
 8004998:	2302      	movs	r3, #2
 800499a:	e0b3      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x180>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4b55      	ldr	r3, [pc, #340]	; (8004b0c <HAL_TIM_ConfigClockSource+0x188>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d4:	d03e      	beq.n	8004a54 <HAL_TIM_ConfigClockSource+0xd0>
 80049d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049da:	f200 8087 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x168>
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	f000 8085 	beq.w	8004af0 <HAL_TIM_ConfigClockSource+0x16c>
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ea:	d87f      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x168>
 80049ec:	2b70      	cmp	r3, #112	; 0x70
 80049ee:	d01a      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0xa2>
 80049f0:	2b70      	cmp	r3, #112	; 0x70
 80049f2:	d87b      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x168>
 80049f4:	2b60      	cmp	r3, #96	; 0x60
 80049f6:	d050      	beq.n	8004a9a <HAL_TIM_ConfigClockSource+0x116>
 80049f8:	2b60      	cmp	r3, #96	; 0x60
 80049fa:	d877      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x168>
 80049fc:	2b50      	cmp	r3, #80	; 0x50
 80049fe:	d03c      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0xf6>
 8004a00:	2b50      	cmp	r3, #80	; 0x50
 8004a02:	d873      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x168>
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d058      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0x136>
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d86f      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x168>
 8004a0c:	2b30      	cmp	r3, #48	; 0x30
 8004a0e:	d064      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x156>
 8004a10:	2b30      	cmp	r3, #48	; 0x30
 8004a12:	d86b      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x168>
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d060      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x156>
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d867      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x168>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05c      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x156>
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d05a      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a24:	e062      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6899      	ldr	r1, [r3, #8]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f000 fc0b 	bl	8005250 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	609a      	str	r2, [r3, #8]
      break;
 8004a52:	e04e      	b.n	8004af2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	6899      	ldr	r1, [r3, #8]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f000 fbf4 	bl	8005250 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a76:	609a      	str	r2, [r3, #8]
      break;
 8004a78:	e03b      	b.n	8004af2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6859      	ldr	r1, [r3, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f000 fb68 	bl	800515c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2150      	movs	r1, #80	; 0x50
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fbc1 	bl	800521a <TIM_ITRx_SetConfig>
      break;
 8004a98:	e02b      	b.n	8004af2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6859      	ldr	r1, [r3, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f000 fb87 	bl	80051ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2160      	movs	r1, #96	; 0x60
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fbb1 	bl	800521a <TIM_ITRx_SetConfig>
      break;
 8004ab8:	e01b      	b.n	8004af2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6859      	ldr	r1, [r3, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f000 fb48 	bl	800515c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2140      	movs	r1, #64	; 0x40
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fba1 	bl	800521a <TIM_ITRx_SetConfig>
      break;
 8004ad8:	e00b      	b.n	8004af2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f000 fb98 	bl	800521a <TIM_ITRx_SetConfig>
        break;
 8004aea:	e002      	b.n	8004af2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004aec:	bf00      	nop
 8004aee:	e000      	b.n	8004af2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004af0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	fffeff88 	.word	0xfffeff88

08004b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a40      	ldr	r2, [pc, #256]	; (8004c74 <TIM_Base_SetConfig+0x114>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3d      	ldr	r2, [pc, #244]	; (8004c78 <TIM_Base_SetConfig+0x118>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3c      	ldr	r2, [pc, #240]	; (8004c7c <TIM_Base_SetConfig+0x11c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a3b      	ldr	r2, [pc, #236]	; (8004c80 <TIM_Base_SetConfig+0x120>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a3a      	ldr	r2, [pc, #232]	; (8004c84 <TIM_Base_SetConfig+0x124>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d108      	bne.n	8004bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2f      	ldr	r2, [pc, #188]	; (8004c74 <TIM_Base_SetConfig+0x114>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d02b      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d027      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2c      	ldr	r2, [pc, #176]	; (8004c78 <TIM_Base_SetConfig+0x118>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d023      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2b      	ldr	r2, [pc, #172]	; (8004c7c <TIM_Base_SetConfig+0x11c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01f      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2a      	ldr	r2, [pc, #168]	; (8004c80 <TIM_Base_SetConfig+0x120>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01b      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <TIM_Base_SetConfig+0x124>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d017      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a28      	ldr	r2, [pc, #160]	; (8004c88 <TIM_Base_SetConfig+0x128>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a27      	ldr	r2, [pc, #156]	; (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00f      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a26      	ldr	r2, [pc, #152]	; (8004c90 <TIM_Base_SetConfig+0x130>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00b      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a25      	ldr	r2, [pc, #148]	; (8004c94 <TIM_Base_SetConfig+0x134>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a24      	ldr	r2, [pc, #144]	; (8004c98 <TIM_Base_SetConfig+0x138>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a23      	ldr	r2, [pc, #140]	; (8004c9c <TIM_Base_SetConfig+0x13c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d108      	bne.n	8004c24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <TIM_Base_SetConfig+0x114>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0xf8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <TIM_Base_SetConfig+0x124>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d103      	bne.n	8004c60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	615a      	str	r2, [r3, #20]
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40010400 	.word	0x40010400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40014400 	.word	0x40014400
 8004c90:	40014800 	.word	0x40014800
 8004c94:	40001800 	.word	0x40001800
 8004c98:	40001c00 	.word	0x40001c00
 8004c9c:	40002000 	.word	0x40002000

08004ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <TIM_OC1_SetConfig+0xd8>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 0302 	bic.w	r3, r3, #2
 8004ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <TIM_OC1_SetConfig+0xdc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_OC1_SetConfig+0x64>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a20      	ldr	r2, [pc, #128]	; (8004d80 <TIM_OC1_SetConfig+0xe0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10c      	bne.n	8004d1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0308 	bic.w	r3, r3, #8
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a16      	ldr	r2, [pc, #88]	; (8004d7c <TIM_OC1_SetConfig+0xdc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_OC1_SetConfig+0x8e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <TIM_OC1_SetConfig+0xe0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d111      	bne.n	8004d52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	621a      	str	r2, [r3, #32]
}
 8004d6c:	bf00      	nop
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	fffeff8f 	.word	0xfffeff8f
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40010400 	.word	0x40010400

08004d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f023 0210 	bic.w	r2, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4b2e      	ldr	r3, [pc, #184]	; (8004e68 <TIM_OC2_SetConfig+0xe4>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0320 	bic.w	r3, r3, #32
 8004dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a23      	ldr	r2, [pc, #140]	; (8004e6c <TIM_OC2_SetConfig+0xe8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_OC2_SetConfig+0x68>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a22      	ldr	r2, [pc, #136]	; (8004e70 <TIM_OC2_SetConfig+0xec>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d10d      	bne.n	8004e08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <TIM_OC2_SetConfig+0xe8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_OC2_SetConfig+0x94>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <TIM_OC2_SetConfig+0xec>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d113      	bne.n	8004e40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	feff8fff 	.word	0xfeff8fff
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	40010400 	.word	0x40010400

08004e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4b2d      	ldr	r3, [pc, #180]	; (8004f54 <TIM_OC3_SetConfig+0xe0>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <TIM_OC3_SetConfig+0xe4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_OC3_SetConfig+0x66>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a21      	ldr	r2, [pc, #132]	; (8004f5c <TIM_OC3_SetConfig+0xe8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d10d      	bne.n	8004ef6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <TIM_OC3_SetConfig+0xe4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC3_SetConfig+0x92>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <TIM_OC3_SetConfig+0xe8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d113      	bne.n	8004f2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	fffeff8f 	.word	0xfffeff8f
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40010400 	.word	0x40010400

08004f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4b1e      	ldr	r3, [pc, #120]	; (8005004 <TIM_OC4_SetConfig+0xa4>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	031b      	lsls	r3, r3, #12
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a13      	ldr	r2, [pc, #76]	; (8005008 <TIM_OC4_SetConfig+0xa8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_OC4_SetConfig+0x68>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a12      	ldr	r2, [pc, #72]	; (800500c <TIM_OC4_SetConfig+0xac>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d109      	bne.n	8004fdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	019b      	lsls	r3, r3, #6
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	feff8fff 	.word	0xfeff8fff
 8005008:	40010000 	.word	0x40010000
 800500c:	40010400 	.word	0x40010400

08005010 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <TIM_OC5_SetConfig+0x98>)
 800503c:	4013      	ands	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005050:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a12      	ldr	r2, [pc, #72]	; (80050ac <TIM_OC5_SetConfig+0x9c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_OC5_SetConfig+0x5e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a11      	ldr	r2, [pc, #68]	; (80050b0 <TIM_OC5_SetConfig+0xa0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d109      	bne.n	8005082 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005074:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	fffeff8f 	.word	0xfffeff8f
 80050ac:	40010000 	.word	0x40010000
 80050b0:	40010400 	.word	0x40010400

080050b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4b1c      	ldr	r3, [pc, #112]	; (8005150 <TIM_OC6_SetConfig+0x9c>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	051b      	lsls	r3, r3, #20
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a13      	ldr	r2, [pc, #76]	; (8005154 <TIM_OC6_SetConfig+0xa0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_OC6_SetConfig+0x60>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a12      	ldr	r2, [pc, #72]	; (8005158 <TIM_OC6_SetConfig+0xa4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d109      	bne.n	8005128 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800511a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	029b      	lsls	r3, r3, #10
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	feff8fff 	.word	0xfeff8fff
 8005154:	40010000 	.word	0x40010000
 8005158:	40010400 	.word	0x40010400

0800515c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f023 0201 	bic.w	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f023 030a 	bic.w	r3, r3, #10
 8005198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b087      	sub	sp, #28
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f023 0210 	bic.w	r2, r3, #16
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	031b      	lsls	r3, r3, #12
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800521a:	b480      	push	{r7}
 800521c:	b085      	sub	sp, #20
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	f043 0307 	orr.w	r3, r3, #7
 800523c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	609a      	str	r2, [r3, #8]
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800526a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	021a      	lsls	r2, r3, #8
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	431a      	orrs	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4313      	orrs	r3, r2
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	2201      	movs	r2, #1
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	401a      	ands	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1a      	ldr	r2, [r3, #32]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e06d      	b.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a30      	ldr	r2, [pc, #192]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2f      	ldr	r2, [pc, #188]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800532e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005340:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a20      	ldr	r2, [pc, #128]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d022      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d01d      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d018      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1c      	ldr	r2, [pc, #112]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d013      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00e      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d009      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a16      	ldr	r2, [pc, #88]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a15      	ldr	r2, [pc, #84]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10c      	bne.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40000800 	.word	0x40000800
 80053ec:	40000c00 	.word	0x40000c00
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40001800 	.word	0x40001800

080053f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005410:	2302      	movs	r3, #2
 8005412:	e065      	b.n	80054e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a16      	ldr	r2, [pc, #88]	; (80054ec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d004      	beq.n	80054a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a14      	ldr	r2, [pc, #80]	; (80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d115      	bne.n	80054ce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	051b      	lsls	r3, r3, #20
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40010400 	.word	0x40010400

080054f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800553e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005542:	2b84      	cmp	r3, #132	; 0x84
 8005544:	d005      	beq.n	8005552 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005546:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	3303      	adds	r3, #3
 8005550:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005564:	f000 fae8 	bl	8005b38 <vTaskStartScheduler>
  
  return osOK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	bd80      	pop	{r7, pc}

0800556e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800556e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005570:	b089      	sub	sp, #36	; 0x24
 8005572:	af04      	add	r7, sp, #16
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d020      	beq.n	80055c2 <osThreadCreate+0x54>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01c      	beq.n	80055c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685c      	ldr	r4, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681d      	ldr	r5, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691e      	ldr	r6, [r3, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff ffc8 	bl	8005530 <makeFreeRtosPriority>
 80055a0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055aa:	9202      	str	r2, [sp, #8]
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	9100      	str	r1, [sp, #0]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	4632      	mov	r2, r6
 80055b4:	4629      	mov	r1, r5
 80055b6:	4620      	mov	r0, r4
 80055b8:	f000 f8ed 	bl	8005796 <xTaskCreateStatic>
 80055bc:	4603      	mov	r3, r0
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e01c      	b.n	80055fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685c      	ldr	r4, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055ce:	b29e      	uxth	r6, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff ffaa 	bl	8005530 <makeFreeRtosPriority>
 80055dc:	4602      	mov	r2, r0
 80055de:	f107 030c 	add.w	r3, r7, #12
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	9200      	str	r2, [sp, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	4632      	mov	r2, r6
 80055ea:	4629      	mov	r1, r5
 80055ec:	4620      	mov	r0, r4
 80055ee:	f000 f935 	bl	800585c <xTaskCreate>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d001      	beq.n	80055fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	e000      	b.n	80055fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055fc:	68fb      	ldr	r3, [r7, #12]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005606 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <osDelay+0x16>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	e000      	b.n	800561e <osDelay+0x18>
 800561c:	2301      	movs	r3, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fa54 	bl	8005acc <vTaskDelay>
  
  return osOK;
 8005624:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f103 0208 	add.w	r2, r3, #8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f04f 32ff 	mov.w	r2, #4294967295
 8005646:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f103 0208 	add.w	r2, r3, #8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f103 0208 	add.w	r2, r3, #8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	601a      	str	r2, [r3, #0]
}
 80056c4:	bf00      	nop
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e6:	d103      	bne.n	80056f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e00c      	b.n	800570a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3308      	adds	r3, #8
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	e002      	b.n	80056fe <vListInsert+0x2e>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	429a      	cmp	r2, r3
 8005708:	d2f6      	bcs.n	80056f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	601a      	str	r2, [r3, #0]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6892      	ldr	r2, [r2, #8]
 8005758:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6852      	ldr	r2, [r2, #4]
 8005762:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	429a      	cmp	r2, r3
 800576c:	d103      	bne.n	8005776 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	1e5a      	subs	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005796:	b580      	push	{r7, lr}
 8005798:	b08e      	sub	sp, #56	; 0x38
 800579a:	af04      	add	r7, sp, #16
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	607a      	str	r2, [r7, #4]
 80057a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10c      	bne.n	80057c4 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	b672      	cpsid	i
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	b662      	cpsie	i
 80057be:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10c      	bne.n	80057e4 <xTaskCreateStatic+0x4e>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	b672      	cpsid	i
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	b662      	cpsie	i
 80057de:	61fb      	str	r3, [r7, #28]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057e4:	2354      	movs	r3, #84	; 0x54
 80057e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b54      	cmp	r3, #84	; 0x54
 80057ec:	d00c      	beq.n	8005808 <xTaskCreateStatic+0x72>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	b672      	cpsid	i
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	b662      	cpsie	i
 8005802:	61bb      	str	r3, [r7, #24]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005808:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01e      	beq.n	800584e <xTaskCreateStatic+0xb8>
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01b      	beq.n	800584e <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800581e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	2202      	movs	r2, #2
 8005824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005828:	2300      	movs	r3, #0
 800582a:	9303      	str	r3, [sp, #12]
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	9302      	str	r3, [sp, #8]
 8005830:	f107 0314 	add.w	r3, r7, #20
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f850 	bl	80058e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005848:	f000 f8d6 	bl	80059f8 <prvAddNewTaskToReadyList>
 800584c:	e001      	b.n	8005852 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005852:	697b      	ldr	r3, [r7, #20]
	}
 8005854:	4618      	mov	r0, r3
 8005856:	3728      	adds	r7, #40	; 0x28
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08c      	sub	sp, #48	; 0x30
 8005860:	af04      	add	r7, sp, #16
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	4613      	mov	r3, r2
 800586a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4618      	mov	r0, r3
 8005872:	f000 febb 	bl	80065ec <pvPortMalloc>
 8005876:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00e      	beq.n	800589c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800587e:	2054      	movs	r0, #84	; 0x54
 8005880:	f000 feb4 	bl	80065ec <pvPortMalloc>
 8005884:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
 8005892:	e005      	b.n	80058a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005894:	6978      	ldr	r0, [r7, #20]
 8005896:	f000 ff73 	bl	8006780 <vPortFree>
 800589a:	e001      	b.n	80058a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d017      	beq.n	80058d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	2300      	movs	r3, #0
 80058b2:	9303      	str	r3, [sp, #12]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	9302      	str	r3, [sp, #8]
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f80e 	bl	80058e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058ca:	69f8      	ldr	r0, [r7, #28]
 80058cc:	f000 f894 	bl	80059f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058d0:	2301      	movs	r3, #1
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e002      	b.n	80058dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058d6:	f04f 33ff 	mov.w	r3, #4294967295
 80058da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058dc:	69bb      	ldr	r3, [r7, #24]
	}
 80058de:	4618      	mov	r0, r3
 80058e0:	3720      	adds	r7, #32
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b088      	sub	sp, #32
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80058fe:	440b      	add	r3, r1
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f023 0307 	bic.w	r3, r3, #7
 800590c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00c      	beq.n	8005932 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	b672      	cpsid	i
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	b662      	cpsie	i
 800592c:	617b      	str	r3, [r7, #20]
}
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01f      	beq.n	8005978 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	e012      	b.n	8005964 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	7819      	ldrb	r1, [r3, #0]
 8005946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	3334      	adds	r3, #52	; 0x34
 800594e:	460a      	mov	r2, r1
 8005950:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d006      	beq.n	800596c <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	3301      	adds	r3, #1
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	2b0f      	cmp	r3, #15
 8005968:	d9e9      	bls.n	800593e <prvInitialiseNewTask+0x58>
 800596a:	e000      	b.n	800596e <prvInitialiseNewTask+0x88>
			{
				break;
 800596c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005976:	e003      	b.n	8005980 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	2b06      	cmp	r3, #6
 8005984:	d901      	bls.n	800598a <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005986:	2306      	movs	r3, #6
 8005988:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800598e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005994:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	2200      	movs	r2, #0
 800599a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	3304      	adds	r3, #4
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff fe64 	bl	800566e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	3318      	adds	r3, #24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fe5f 	bl	800566e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	f1c3 0207 	rsb	r2, r3, #7
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	2200      	movs	r2, #0
 80059ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	68f9      	ldr	r1, [r7, #12]
 80059d8:	69b8      	ldr	r0, [r7, #24]
 80059da:	f000 fc13 	bl	8006204 <pxPortInitialiseStack>
 80059de:	4602      	mov	r2, r0
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059f0:	bf00      	nop
 80059f2:	3720      	adds	r7, #32
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a00:	f000 fd0c 	bl	800641c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a04:	4b2a      	ldr	r3, [pc, #168]	; (8005ab0 <prvAddNewTaskToReadyList+0xb8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	4a29      	ldr	r2, [pc, #164]	; (8005ab0 <prvAddNewTaskToReadyList+0xb8>)
 8005a0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a0e:	4b29      	ldr	r3, [pc, #164]	; (8005ab4 <prvAddNewTaskToReadyList+0xbc>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a16:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <prvAddNewTaskToReadyList+0xbc>)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a1c:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <prvAddNewTaskToReadyList+0xb8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d110      	bne.n	8005a46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a24:	f000 fac8 	bl	8005fb8 <prvInitialiseTaskLists>
 8005a28:	e00d      	b.n	8005a46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a2a:	4b23      	ldr	r3, [pc, #140]	; (8005ab8 <prvAddNewTaskToReadyList+0xc0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d109      	bne.n	8005a46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a32:	4b20      	ldr	r3, [pc, #128]	; (8005ab4 <prvAddNewTaskToReadyList+0xbc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d802      	bhi.n	8005a46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a40:	4a1c      	ldr	r2, [pc, #112]	; (8005ab4 <prvAddNewTaskToReadyList+0xbc>)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a46:	4b1d      	ldr	r3, [pc, #116]	; (8005abc <prvAddNewTaskToReadyList+0xc4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	4a1b      	ldr	r2, [pc, #108]	; (8005abc <prvAddNewTaskToReadyList+0xc4>)
 8005a4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	2201      	movs	r2, #1
 8005a56:	409a      	lsls	r2, r3
 8005a58:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <prvAddNewTaskToReadyList+0xc8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	4a18      	ldr	r2, [pc, #96]	; (8005ac0 <prvAddNewTaskToReadyList+0xc8>)
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <prvAddNewTaskToReadyList+0xcc>)
 8005a70:	441a      	add	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3304      	adds	r3, #4
 8005a76:	4619      	mov	r1, r3
 8005a78:	4610      	mov	r0, r2
 8005a7a:	f7ff fe05 	bl	8005688 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a7e:	f000 fd01 	bl	8006484 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <prvAddNewTaskToReadyList+0xc0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00e      	beq.n	8005aa8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <prvAddNewTaskToReadyList+0xbc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d207      	bcs.n	8005aa8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <prvAddNewTaskToReadyList+0xd0>)
 8005a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa8:	bf00      	nop
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000678 	.word	0x20000678
 8005ab4:	20000578 	.word	0x20000578
 8005ab8:	20000684 	.word	0x20000684
 8005abc:	20000694 	.word	0x20000694
 8005ac0:	20000680 	.word	0x20000680
 8005ac4:	2000057c 	.word	0x2000057c
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d019      	beq.n	8005b12 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <vTaskDelay+0x64>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00c      	beq.n	8005b00 <vTaskDelay+0x34>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	b672      	cpsid	i
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	b662      	cpsie	i
 8005afa:	60bb      	str	r3, [r7, #8]
}
 8005afc:	bf00      	nop
 8005afe:	e7fe      	b.n	8005afe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005b00:	f000 f87e 	bl	8005c00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b04:	2100      	movs	r1, #0
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fb16 	bl	8006138 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b0c:	f000 f886 	bl	8005c1c <xTaskResumeAll>
 8005b10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d107      	bne.n	8005b28 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <vTaskDelay+0x68>)
 8005b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	200006a0 	.word	0x200006a0
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b46:	463a      	mov	r2, r7
 8005b48:	1d39      	adds	r1, r7, #4
 8005b4a:	f107 0308 	add.w	r3, r7, #8
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fa ff42 	bl	80009d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	9202      	str	r2, [sp, #8]
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	2300      	movs	r3, #0
 8005b64:	460a      	mov	r2, r1
 8005b66:	4920      	ldr	r1, [pc, #128]	; (8005be8 <vTaskStartScheduler+0xb0>)
 8005b68:	4820      	ldr	r0, [pc, #128]	; (8005bec <vTaskStartScheduler+0xb4>)
 8005b6a:	f7ff fe14 	bl	8005796 <xTaskCreateStatic>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <vTaskStartScheduler+0xb8>)
 8005b72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b74:	4b1e      	ldr	r3, [pc, #120]	; (8005bf0 <vTaskStartScheduler+0xb8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e001      	b.n	8005b86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d118      	bne.n	8005bbe <vTaskStartScheduler+0x86>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	b672      	cpsid	i
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	b662      	cpsie	i
 8005ba0:	613b      	str	r3, [r7, #16]
}
 8005ba2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ba4:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <vTaskStartScheduler+0xbc>)
 8005ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8005baa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bac:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <vTaskStartScheduler+0xc0>)
 8005bae:	2201      	movs	r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bb2:	4b12      	ldr	r3, [pc, #72]	; (8005bfc <vTaskStartScheduler+0xc4>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bb8:	f000 fbb2 	bl	8006320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bbc:	e010      	b.n	8005be0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d10c      	bne.n	8005be0 <vTaskStartScheduler+0xa8>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	b672      	cpsid	i
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	b662      	cpsie	i
 8005bda:	60fb      	str	r3, [r7, #12]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <vTaskStartScheduler+0xa6>
}
 8005be0:	bf00      	nop
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	08006a88 	.word	0x08006a88
 8005bec:	08005f89 	.word	0x08005f89
 8005bf0:	2000069c 	.word	0x2000069c
 8005bf4:	20000698 	.word	0x20000698
 8005bf8:	20000684 	.word	0x20000684
 8005bfc:	2000067c 	.word	0x2000067c

08005c00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c04:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <vTaskSuspendAll+0x18>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	4a03      	ldr	r2, [pc, #12]	; (8005c18 <vTaskSuspendAll+0x18>)
 8005c0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005c0e:	bf00      	nop
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	200006a0 	.word	0x200006a0

08005c1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c2a:	4b42      	ldr	r3, [pc, #264]	; (8005d34 <xTaskResumeAll+0x118>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10c      	bne.n	8005c4c <xTaskResumeAll+0x30>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	b672      	cpsid	i
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	b662      	cpsie	i
 8005c46:	603b      	str	r3, [r7, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c4c:	f000 fbe6 	bl	800641c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c50:	4b38      	ldr	r3, [pc, #224]	; (8005d34 <xTaskResumeAll+0x118>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	4a37      	ldr	r2, [pc, #220]	; (8005d34 <xTaskResumeAll+0x118>)
 8005c58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c5a:	4b36      	ldr	r3, [pc, #216]	; (8005d34 <xTaskResumeAll+0x118>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d161      	bne.n	8005d26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c62:	4b35      	ldr	r3, [pc, #212]	; (8005d38 <xTaskResumeAll+0x11c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d05d      	beq.n	8005d26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c6a:	e02e      	b.n	8005cca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6c:	4b33      	ldr	r3, [pc, #204]	; (8005d3c <xTaskResumeAll+0x120>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3318      	adds	r3, #24
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff fd62 	bl	8005742 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3304      	adds	r3, #4
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff fd5d 	bl	8005742 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	4b2b      	ldr	r3, [pc, #172]	; (8005d40 <xTaskResumeAll+0x124>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	4a2a      	ldr	r2, [pc, #168]	; (8005d40 <xTaskResumeAll+0x124>)
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4a27      	ldr	r2, [pc, #156]	; (8005d44 <xTaskResumeAll+0x128>)
 8005ca8:	441a      	add	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f7ff fce9 	bl	8005688 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	4b23      	ldr	r3, [pc, #140]	; (8005d48 <xTaskResumeAll+0x12c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d302      	bcc.n	8005cca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005cc4:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <xTaskResumeAll+0x130>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cca:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <xTaskResumeAll+0x120>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1cc      	bne.n	8005c6c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cd8:	f000 fa0e 	bl	80060f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cdc:	4b1c      	ldr	r3, [pc, #112]	; (8005d50 <xTaskResumeAll+0x134>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d010      	beq.n	8005d0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ce8:	f000 f836 	bl	8005d58 <xTaskIncrementTick>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005cf2:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <xTaskResumeAll+0x130>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f1      	bne.n	8005ce8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005d04:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <xTaskResumeAll+0x134>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d0a:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <xTaskResumeAll+0x130>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d12:	2301      	movs	r3, #1
 8005d14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d16:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <xTaskResumeAll+0x138>)
 8005d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d26:	f000 fbad 	bl	8006484 <vPortExitCritical>

	return xAlreadyYielded;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	200006a0 	.word	0x200006a0
 8005d38:	20000678 	.word	0x20000678
 8005d3c:	20000638 	.word	0x20000638
 8005d40:	20000680 	.word	0x20000680
 8005d44:	2000057c 	.word	0x2000057c
 8005d48:	20000578 	.word	0x20000578
 8005d4c:	2000068c 	.word	0x2000068c
 8005d50:	20000688 	.word	0x20000688
 8005d54:	e000ed04 	.word	0xe000ed04

08005d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d62:	4b4f      	ldr	r3, [pc, #316]	; (8005ea0 <xTaskIncrementTick+0x148>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f040 808a 	bne.w	8005e80 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ea4 <xTaskIncrementTick+0x14c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3301      	adds	r3, #1
 8005d72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d74:	4a4b      	ldr	r2, [pc, #300]	; (8005ea4 <xTaskIncrementTick+0x14c>)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d122      	bne.n	8005dc6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d80:	4b49      	ldr	r3, [pc, #292]	; (8005ea8 <xTaskIncrementTick+0x150>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	b672      	cpsid	i
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	b662      	cpsie	i
 8005d9e:	603b      	str	r3, [r7, #0]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <xTaskIncrementTick+0x4a>
 8005da4:	4b40      	ldr	r3, [pc, #256]	; (8005ea8 <xTaskIncrementTick+0x150>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	4b40      	ldr	r3, [pc, #256]	; (8005eac <xTaskIncrementTick+0x154>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a3e      	ldr	r2, [pc, #248]	; (8005ea8 <xTaskIncrementTick+0x150>)
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	4a3e      	ldr	r2, [pc, #248]	; (8005eac <xTaskIncrementTick+0x154>)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	4b3d      	ldr	r3, [pc, #244]	; (8005eb0 <xTaskIncrementTick+0x158>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	4a3c      	ldr	r2, [pc, #240]	; (8005eb0 <xTaskIncrementTick+0x158>)
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	f000 f999 	bl	80060f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dc6:	4b3b      	ldr	r3, [pc, #236]	; (8005eb4 <xTaskIncrementTick+0x15c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d348      	bcc.n	8005e62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dd0:	4b35      	ldr	r3, [pc, #212]	; (8005ea8 <xTaskIncrementTick+0x150>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dda:	4b36      	ldr	r3, [pc, #216]	; (8005eb4 <xTaskIncrementTick+0x15c>)
 8005ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8005de0:	601a      	str	r2, [r3, #0]
					break;
 8005de2:	e03e      	b.n	8005e62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de4:	4b30      	ldr	r3, [pc, #192]	; (8005ea8 <xTaskIncrementTick+0x150>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d203      	bcs.n	8005e04 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005dfc:	4a2d      	ldr	r2, [pc, #180]	; (8005eb4 <xTaskIncrementTick+0x15c>)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e02:	e02e      	b.n	8005e62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff fc9a 	bl	8005742 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	3318      	adds	r3, #24
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fc91 	bl	8005742 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	2201      	movs	r2, #1
 8005e26:	409a      	lsls	r2, r3
 8005e28:	4b23      	ldr	r3, [pc, #140]	; (8005eb8 <xTaskIncrementTick+0x160>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	4a22      	ldr	r2, [pc, #136]	; (8005eb8 <xTaskIncrementTick+0x160>)
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4a1f      	ldr	r2, [pc, #124]	; (8005ebc <xTaskIncrementTick+0x164>)
 8005e40:	441a      	add	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	3304      	adds	r3, #4
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	f7ff fc1d 	bl	8005688 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e52:	4b1b      	ldr	r3, [pc, #108]	; (8005ec0 <xTaskIncrementTick+0x168>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d3b9      	bcc.n	8005dd0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e60:	e7b6      	b.n	8005dd0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e62:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <xTaskIncrementTick+0x168>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4914      	ldr	r1, [pc, #80]	; (8005ebc <xTaskIncrementTick+0x164>)
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d907      	bls.n	8005e8a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e004      	b.n	8005e8a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e80:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <xTaskIncrementTick+0x16c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3301      	adds	r3, #1
 8005e86:	4a0f      	ldr	r2, [pc, #60]	; (8005ec4 <xTaskIncrementTick+0x16c>)
 8005e88:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <xTaskIncrementTick+0x170>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005e92:	2301      	movs	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e96:	697b      	ldr	r3, [r7, #20]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	200006a0 	.word	0x200006a0
 8005ea4:	2000067c 	.word	0x2000067c
 8005ea8:	20000630 	.word	0x20000630
 8005eac:	20000634 	.word	0x20000634
 8005eb0:	20000690 	.word	0x20000690
 8005eb4:	20000698 	.word	0x20000698
 8005eb8:	20000680 	.word	0x20000680
 8005ebc:	2000057c 	.word	0x2000057c
 8005ec0:	20000578 	.word	0x20000578
 8005ec4:	20000688 	.word	0x20000688
 8005ec8:	2000068c 	.word	0x2000068c

08005ecc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ed2:	4b28      	ldr	r3, [pc, #160]	; (8005f74 <vTaskSwitchContext+0xa8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eda:	4b27      	ldr	r3, [pc, #156]	; (8005f78 <vTaskSwitchContext+0xac>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ee0:	e041      	b.n	8005f66 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005ee2:	4b25      	ldr	r3, [pc, #148]	; (8005f78 <vTaskSwitchContext+0xac>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee8:	4b24      	ldr	r3, [pc, #144]	; (8005f7c <vTaskSwitchContext+0xb0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	fab3 f383 	clz	r3, r3
 8005ef4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ef6:	7afb      	ldrb	r3, [r7, #11]
 8005ef8:	f1c3 031f 	rsb	r3, r3, #31
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	4920      	ldr	r1, [pc, #128]	; (8005f80 <vTaskSwitchContext+0xb4>)
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10c      	bne.n	8005f2c <vTaskSwitchContext+0x60>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	b672      	cpsid	i
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	b662      	cpsie	i
 8005f26:	607b      	str	r3, [r7, #4]
}
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <vTaskSwitchContext+0x5e>
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <vTaskSwitchContext+0xb4>)
 8005f38:	4413      	add	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	605a      	str	r2, [r3, #4]
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d104      	bne.n	8005f5c <vTaskSwitchContext+0x90>
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	605a      	str	r2, [r3, #4]
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <vTaskSwitchContext+0xb8>)
 8005f64:	6013      	str	r3, [r2, #0]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	200006a0 	.word	0x200006a0
 8005f78:	2000068c 	.word	0x2000068c
 8005f7c:	20000680 	.word	0x20000680
 8005f80:	2000057c 	.word	0x2000057c
 8005f84:	20000578 	.word	0x20000578

08005f88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f90:	f000 f852 	bl	8006038 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f94:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <prvIdleTask+0x28>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d9f9      	bls.n	8005f90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f9c:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <prvIdleTask+0x2c>)
 8005f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fac:	e7f0      	b.n	8005f90 <prvIdleTask+0x8>
 8005fae:	bf00      	nop
 8005fb0:	2000057c 	.word	0x2000057c
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
 8005fc2:	e00c      	b.n	8005fde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4a12      	ldr	r2, [pc, #72]	; (8006018 <prvInitialiseTaskLists+0x60>)
 8005fd0:	4413      	add	r3, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff fb2b 	bl	800562e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	607b      	str	r3, [r7, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b06      	cmp	r3, #6
 8005fe2:	d9ef      	bls.n	8005fc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fe4:	480d      	ldr	r0, [pc, #52]	; (800601c <prvInitialiseTaskLists+0x64>)
 8005fe6:	f7ff fb22 	bl	800562e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fea:	480d      	ldr	r0, [pc, #52]	; (8006020 <prvInitialiseTaskLists+0x68>)
 8005fec:	f7ff fb1f 	bl	800562e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ff0:	480c      	ldr	r0, [pc, #48]	; (8006024 <prvInitialiseTaskLists+0x6c>)
 8005ff2:	f7ff fb1c 	bl	800562e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ff6:	480c      	ldr	r0, [pc, #48]	; (8006028 <prvInitialiseTaskLists+0x70>)
 8005ff8:	f7ff fb19 	bl	800562e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ffc:	480b      	ldr	r0, [pc, #44]	; (800602c <prvInitialiseTaskLists+0x74>)
 8005ffe:	f7ff fb16 	bl	800562e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006002:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <prvInitialiseTaskLists+0x78>)
 8006004:	4a05      	ldr	r2, [pc, #20]	; (800601c <prvInitialiseTaskLists+0x64>)
 8006006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006008:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <prvInitialiseTaskLists+0x7c>)
 800600a:	4a05      	ldr	r2, [pc, #20]	; (8006020 <prvInitialiseTaskLists+0x68>)
 800600c:	601a      	str	r2, [r3, #0]
}
 800600e:	bf00      	nop
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	2000057c 	.word	0x2000057c
 800601c:	20000608 	.word	0x20000608
 8006020:	2000061c 	.word	0x2000061c
 8006024:	20000638 	.word	0x20000638
 8006028:	2000064c 	.word	0x2000064c
 800602c:	20000664 	.word	0x20000664
 8006030:	20000630 	.word	0x20000630
 8006034:	20000634 	.word	0x20000634

08006038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800603e:	e019      	b.n	8006074 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006040:	f000 f9ec 	bl	800641c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006044:	4b10      	ldr	r3, [pc, #64]	; (8006088 <prvCheckTasksWaitingTermination+0x50>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3304      	adds	r3, #4
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff fb76 	bl	8005742 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006056:	4b0d      	ldr	r3, [pc, #52]	; (800608c <prvCheckTasksWaitingTermination+0x54>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3b01      	subs	r3, #1
 800605c:	4a0b      	ldr	r2, [pc, #44]	; (800608c <prvCheckTasksWaitingTermination+0x54>)
 800605e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <prvCheckTasksWaitingTermination+0x58>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3b01      	subs	r3, #1
 8006066:	4a0a      	ldr	r2, [pc, #40]	; (8006090 <prvCheckTasksWaitingTermination+0x58>)
 8006068:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800606a:	f000 fa0b 	bl	8006484 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f810 	bl	8006094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006074:	4b06      	ldr	r3, [pc, #24]	; (8006090 <prvCheckTasksWaitingTermination+0x58>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e1      	bne.n	8006040 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	2000064c 	.word	0x2000064c
 800608c:	20000678 	.word	0x20000678
 8006090:	20000660 	.word	0x20000660

08006094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d108      	bne.n	80060b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fb68 	bl	8006780 <vPortFree>
				vPortFree( pxTCB );
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fb65 	bl	8006780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060b6:	e01a      	b.n	80060ee <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d103      	bne.n	80060ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fb5c 	bl	8006780 <vPortFree>
	}
 80060c8:	e011      	b.n	80060ee <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d00c      	beq.n	80060ee <prvDeleteTCB+0x5a>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	b672      	cpsid	i
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	b662      	cpsie	i
 80060e8:	60fb      	str	r3, [r7, #12]
}
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <prvDeleteTCB+0x58>
	}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060fe:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <prvResetNextTaskUnblockTime+0x38>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <prvResetNextTaskUnblockTime+0x3c>)
 800610a:	f04f 32ff 	mov.w	r2, #4294967295
 800610e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006110:	e008      	b.n	8006124 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006112:	4b07      	ldr	r3, [pc, #28]	; (8006130 <prvResetNextTaskUnblockTime+0x38>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	4a04      	ldr	r2, [pc, #16]	; (8006134 <prvResetNextTaskUnblockTime+0x3c>)
 8006122:	6013      	str	r3, [r2, #0]
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	20000630 	.word	0x20000630
 8006134:	20000698 	.word	0x20000698

08006138 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006142:	4b29      	ldr	r3, [pc, #164]	; (80061e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006148:	4b28      	ldr	r3, [pc, #160]	; (80061ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3304      	adds	r3, #4
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff faf7 	bl	8005742 <uxListRemove>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800615a:	4b24      	ldr	r3, [pc, #144]	; (80061ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	2201      	movs	r2, #1
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	43da      	mvns	r2, r3
 8006168:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4013      	ands	r3, r2
 800616e:	4a20      	ldr	r2, [pc, #128]	; (80061f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006170:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006178:	d10a      	bne.n	8006190 <prvAddCurrentTaskToDelayedList+0x58>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d007      	beq.n	8006190 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006180:	4b1a      	ldr	r3, [pc, #104]	; (80061ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3304      	adds	r3, #4
 8006186:	4619      	mov	r1, r3
 8006188:	481a      	ldr	r0, [pc, #104]	; (80061f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800618a:	f7ff fa7d 	bl	8005688 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800618e:	e026      	b.n	80061de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4413      	add	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006198:	4b14      	ldr	r3, [pc, #80]	; (80061ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d209      	bcs.n	80061bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a8:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f7ff fa8b 	bl	80056d0 <vListInsert>
}
 80061ba:	e010      	b.n	80061de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061bc:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3304      	adds	r3, #4
 80061c6:	4619      	mov	r1, r3
 80061c8:	4610      	mov	r0, r2
 80061ca:	f7ff fa81 	bl	80056d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061ce:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d202      	bcs.n	80061de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80061d8:	4a09      	ldr	r2, [pc, #36]	; (8006200 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	6013      	str	r3, [r2, #0]
}
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	2000067c 	.word	0x2000067c
 80061ec:	20000578 	.word	0x20000578
 80061f0:	20000680 	.word	0x20000680
 80061f4:	20000664 	.word	0x20000664
 80061f8:	20000634 	.word	0x20000634
 80061fc:	20000630 	.word	0x20000630
 8006200:	20000698 	.word	0x20000698

08006204 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3b04      	subs	r3, #4
 8006214:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800621c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b04      	subs	r3, #4
 8006222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f023 0201 	bic.w	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3b04      	subs	r3, #4
 8006232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006234:	4a0c      	ldr	r2, [pc, #48]	; (8006268 <pxPortInitialiseStack+0x64>)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3b14      	subs	r3, #20
 800623e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3b04      	subs	r3, #4
 800624a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f06f 0202 	mvn.w	r2, #2
 8006252:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3b20      	subs	r3, #32
 8006258:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800625a:	68fb      	ldr	r3, [r7, #12]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	0800626d 	.word	0x0800626d

0800626c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006276:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <prvTaskExitError+0x5c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627e:	d00c      	beq.n	800629a <prvTaskExitError+0x2e>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	b672      	cpsid	i
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	b662      	cpsie	i
 8006294:	60fb      	str	r3, [r7, #12]
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <prvTaskExitError+0x2c>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	b672      	cpsid	i
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	b662      	cpsie	i
 80062ae:	60bb      	str	r3, [r7, #8]
}
 80062b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062b2:	bf00      	nop
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0fc      	beq.n	80062b4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	200000fc 	.word	0x200000fc
 80062cc:	00000000 	.word	0x00000000

080062d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <pxCurrentTCBConst2>)
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	6808      	ldr	r0, [r1, #0]
 80062d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	f380 8809 	msr	PSP, r0
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8811 	msr	BASEPRI, r0
 80062ea:	4770      	bx	lr
 80062ec:	f3af 8000 	nop.w

080062f0 <pxCurrentTCBConst2>:
 80062f0:	20000578 	.word	0x20000578
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop

080062f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062f8:	4808      	ldr	r0, [pc, #32]	; (800631c <prvPortStartFirstTask+0x24>)
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	6800      	ldr	r0, [r0, #0]
 80062fe:	f380 8808 	msr	MSP, r0
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8814 	msr	CONTROL, r0
 800630a:	b662      	cpsie	i
 800630c:	b661      	cpsie	f
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	df00      	svc	0
 8006318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800631a:	bf00      	nop
 800631c:	e000ed08 	.word	0xe000ed08

08006320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006326:	4b37      	ldr	r3, [pc, #220]	; (8006404 <xPortStartScheduler+0xe4>)
 8006328:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	b2db      	uxtb	r3, r3
 8006330:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	22ff      	movs	r2, #255	; 0xff
 8006336:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006348:	b2da      	uxtb	r2, r3
 800634a:	4b2f      	ldr	r3, [pc, #188]	; (8006408 <xPortStartScheduler+0xe8>)
 800634c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800634e:	4b2f      	ldr	r3, [pc, #188]	; (800640c <xPortStartScheduler+0xec>)
 8006350:	2207      	movs	r2, #7
 8006352:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006354:	e009      	b.n	800636a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006356:	4b2d      	ldr	r3, [pc, #180]	; (800640c <xPortStartScheduler+0xec>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3b01      	subs	r3, #1
 800635c:	4a2b      	ldr	r2, [pc, #172]	; (800640c <xPortStartScheduler+0xec>)
 800635e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	b2db      	uxtb	r3, r3
 8006368:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006372:	2b80      	cmp	r3, #128	; 0x80
 8006374:	d0ef      	beq.n	8006356 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006376:	4b25      	ldr	r3, [pc, #148]	; (800640c <xPortStartScheduler+0xec>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f1c3 0307 	rsb	r3, r3, #7
 800637e:	2b04      	cmp	r3, #4
 8006380:	d00c      	beq.n	800639c <xPortStartScheduler+0x7c>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	b672      	cpsid	i
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	b662      	cpsie	i
 8006396:	60bb      	str	r3, [r7, #8]
}
 8006398:	bf00      	nop
 800639a:	e7fe      	b.n	800639a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800639c:	4b1b      	ldr	r3, [pc, #108]	; (800640c <xPortStartScheduler+0xec>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	4a1a      	ldr	r2, [pc, #104]	; (800640c <xPortStartScheduler+0xec>)
 80063a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063a6:	4b19      	ldr	r3, [pc, #100]	; (800640c <xPortStartScheduler+0xec>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ae:	4a17      	ldr	r2, [pc, #92]	; (800640c <xPortStartScheduler+0xec>)
 80063b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063ba:	4b15      	ldr	r3, [pc, #84]	; (8006410 <xPortStartScheduler+0xf0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a14      	ldr	r2, [pc, #80]	; (8006410 <xPortStartScheduler+0xf0>)
 80063c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063c6:	4b12      	ldr	r3, [pc, #72]	; (8006410 <xPortStartScheduler+0xf0>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a11      	ldr	r2, [pc, #68]	; (8006410 <xPortStartScheduler+0xf0>)
 80063cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063d2:	f000 f8dd 	bl	8006590 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063d6:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <xPortStartScheduler+0xf4>)
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063dc:	f000 f8fc 	bl	80065d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063e0:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <xPortStartScheduler+0xf8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a0c      	ldr	r2, [pc, #48]	; (8006418 <xPortStartScheduler+0xf8>)
 80063e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063ec:	f7ff ff84 	bl	80062f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063f0:	f7ff fd6c 	bl	8005ecc <vTaskSwitchContext>
	prvTaskExitError();
 80063f4:	f7ff ff3a 	bl	800626c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	e000e400 	.word	0xe000e400
 8006408:	200006a4 	.word	0x200006a4
 800640c:	200006a8 	.word	0x200006a8
 8006410:	e000ed20 	.word	0xe000ed20
 8006414:	200000fc 	.word	0x200000fc
 8006418:	e000ef34 	.word	0xe000ef34

0800641c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	b672      	cpsid	i
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	b662      	cpsie	i
 8006436:	607b      	str	r3, [r7, #4]
}
 8006438:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800643a:	4b10      	ldr	r3, [pc, #64]	; (800647c <vPortEnterCritical+0x60>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3301      	adds	r3, #1
 8006440:	4a0e      	ldr	r2, [pc, #56]	; (800647c <vPortEnterCritical+0x60>)
 8006442:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006444:	4b0d      	ldr	r3, [pc, #52]	; (800647c <vPortEnterCritical+0x60>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d111      	bne.n	8006470 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800644c:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <vPortEnterCritical+0x64>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00c      	beq.n	8006470 <vPortEnterCritical+0x54>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	b672      	cpsid	i
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	b662      	cpsie	i
 800646a:	603b      	str	r3, [r7, #0]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <vPortEnterCritical+0x52>
	}
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	200000fc 	.word	0x200000fc
 8006480:	e000ed04 	.word	0xe000ed04

08006484 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800648a:	4b13      	ldr	r3, [pc, #76]	; (80064d8 <vPortExitCritical+0x54>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10c      	bne.n	80064ac <vPortExitCritical+0x28>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	b672      	cpsid	i
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	b662      	cpsie	i
 80064a6:	607b      	str	r3, [r7, #4]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80064ac:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <vPortExitCritical+0x54>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	4a09      	ldr	r2, [pc, #36]	; (80064d8 <vPortExitCritical+0x54>)
 80064b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064b6:	4b08      	ldr	r3, [pc, #32]	; (80064d8 <vPortExitCritical+0x54>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d105      	bne.n	80064ca <vPortExitCritical+0x46>
 80064be:	2300      	movs	r3, #0
 80064c0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	200000fc 	.word	0x200000fc
 80064dc:	00000000 	.word	0x00000000

080064e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064e0:	f3ef 8009 	mrs	r0, PSP
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	4b15      	ldr	r3, [pc, #84]	; (8006540 <pxCurrentTCBConst>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	f01e 0f10 	tst.w	lr, #16
 80064f0:	bf08      	it	eq
 80064f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fa:	6010      	str	r0, [r2, #0]
 80064fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006504:	b672      	cpsid	i
 8006506:	f380 8811 	msr	BASEPRI, r0
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	b662      	cpsie	i
 8006514:	f7ff fcda 	bl	8005ecc <vTaskSwitchContext>
 8006518:	f04f 0000 	mov.w	r0, #0
 800651c:	f380 8811 	msr	BASEPRI, r0
 8006520:	bc09      	pop	{r0, r3}
 8006522:	6819      	ldr	r1, [r3, #0]
 8006524:	6808      	ldr	r0, [r1, #0]
 8006526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	f01e 0f10 	tst.w	lr, #16
 800652e:	bf08      	it	eq
 8006530:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006534:	f380 8809 	msr	PSP, r0
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop

08006540 <pxCurrentTCBConst>:
 8006540:	20000578 	.word	0x20000578
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop

08006548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	b672      	cpsid	i
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	b662      	cpsie	i
 8006562:	607b      	str	r3, [r7, #4]
}
 8006564:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006566:	f7ff fbf7 	bl	8005d58 <xTaskIncrementTick>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006570:	4b06      	ldr	r3, [pc, #24]	; (800658c <SysTick_Handler+0x44>)
 8006572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	2300      	movs	r3, #0
 800657a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	f383 8811 	msr	BASEPRI, r3
}
 8006582:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006584:	bf00      	nop
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	e000ed04 	.word	0xe000ed04

08006590 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006594:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <vPortSetupTimerInterrupt+0x34>)
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800659a:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <vPortSetupTimerInterrupt+0x38>)
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065a0:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <vPortSetupTimerInterrupt+0x3c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a0a      	ldr	r2, [pc, #40]	; (80065d0 <vPortSetupTimerInterrupt+0x40>)
 80065a6:	fba2 2303 	umull	r2, r3, r2, r3
 80065aa:	099b      	lsrs	r3, r3, #6
 80065ac:	4a09      	ldr	r2, [pc, #36]	; (80065d4 <vPortSetupTimerInterrupt+0x44>)
 80065ae:	3b01      	subs	r3, #1
 80065b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065b2:	4b04      	ldr	r3, [pc, #16]	; (80065c4 <vPortSetupTimerInterrupt+0x34>)
 80065b4:	2207      	movs	r2, #7
 80065b6:	601a      	str	r2, [r3, #0]
}
 80065b8:	bf00      	nop
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	e000e010 	.word	0xe000e010
 80065c8:	e000e018 	.word	0xe000e018
 80065cc:	20000028 	.word	0x20000028
 80065d0:	10624dd3 	.word	0x10624dd3
 80065d4:	e000e014 	.word	0xe000e014

080065d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065e8 <vPortEnableVFP+0x10>
 80065dc:	6801      	ldr	r1, [r0, #0]
 80065de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065e2:	6001      	str	r1, [r0, #0]
 80065e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065e6:	bf00      	nop
 80065e8:	e000ed88 	.word	0xe000ed88

080065ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08a      	sub	sp, #40	; 0x28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065f8:	f7ff fb02 	bl	8005c00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065fc:	4b5b      	ldr	r3, [pc, #364]	; (800676c <pvPortMalloc+0x180>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006604:	f000 f91a 	bl	800683c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006608:	4b59      	ldr	r3, [pc, #356]	; (8006770 <pvPortMalloc+0x184>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4013      	ands	r3, r2
 8006610:	2b00      	cmp	r3, #0
 8006612:	f040 8092 	bne.w	800673a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01f      	beq.n	800665c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800661c:	2208      	movs	r2, #8
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4413      	add	r3, r2
 8006622:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b00      	cmp	r3, #0
 800662c:	d016      	beq.n	800665c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f023 0307 	bic.w	r3, r3, #7
 8006634:	3308      	adds	r3, #8
 8006636:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00c      	beq.n	800665c <pvPortMalloc+0x70>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	b672      	cpsid	i
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	b662      	cpsie	i
 8006656:	617b      	str	r3, [r7, #20]
}
 8006658:	bf00      	nop
 800665a:	e7fe      	b.n	800665a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d06b      	beq.n	800673a <pvPortMalloc+0x14e>
 8006662:	4b44      	ldr	r3, [pc, #272]	; (8006774 <pvPortMalloc+0x188>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	429a      	cmp	r2, r3
 800666a:	d866      	bhi.n	800673a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800666c:	4b42      	ldr	r3, [pc, #264]	; (8006778 <pvPortMalloc+0x18c>)
 800666e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006670:	4b41      	ldr	r3, [pc, #260]	; (8006778 <pvPortMalloc+0x18c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006676:	e004      	b.n	8006682 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d903      	bls.n	8006694 <pvPortMalloc+0xa8>
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1f1      	bne.n	8006678 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006694:	4b35      	ldr	r3, [pc, #212]	; (800676c <pvPortMalloc+0x180>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669a:	429a      	cmp	r2, r3
 800669c:	d04d      	beq.n	800673a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2208      	movs	r2, #8
 80066a4:	4413      	add	r3, r2
 80066a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	2308      	movs	r3, #8
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	429a      	cmp	r2, r3
 80066be:	d921      	bls.n	8006704 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4413      	add	r3, r2
 80066c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00c      	beq.n	80066ec <pvPortMalloc+0x100>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	b672      	cpsid	i
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	b662      	cpsie	i
 80066e6:	613b      	str	r3, [r7, #16]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	1ad2      	subs	r2, r2, r3
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066fe:	69b8      	ldr	r0, [r7, #24]
 8006700:	f000 f8fe 	bl	8006900 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006704:	4b1b      	ldr	r3, [pc, #108]	; (8006774 <pvPortMalloc+0x188>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	4a19      	ldr	r2, [pc, #100]	; (8006774 <pvPortMalloc+0x188>)
 8006710:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006712:	4b18      	ldr	r3, [pc, #96]	; (8006774 <pvPortMalloc+0x188>)
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	4b19      	ldr	r3, [pc, #100]	; (800677c <pvPortMalloc+0x190>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d203      	bcs.n	8006726 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800671e:	4b15      	ldr	r3, [pc, #84]	; (8006774 <pvPortMalloc+0x188>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a16      	ldr	r2, [pc, #88]	; (800677c <pvPortMalloc+0x190>)
 8006724:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	4b11      	ldr	r3, [pc, #68]	; (8006770 <pvPortMalloc+0x184>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	431a      	orrs	r2, r3
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800673a:	f7ff fa6f 	bl	8005c1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00c      	beq.n	8006762 <pvPortMalloc+0x176>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	b672      	cpsid	i
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	b662      	cpsie	i
 800675c:	60fb      	str	r3, [r7, #12]
}
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <pvPortMalloc+0x174>
	return pvReturn;
 8006762:	69fb      	ldr	r3, [r7, #28]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3728      	adds	r7, #40	; 0x28
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	200042b4 	.word	0x200042b4
 8006770:	200042c0 	.word	0x200042c0
 8006774:	200042b8 	.word	0x200042b8
 8006778:	200042ac 	.word	0x200042ac
 800677c:	200042bc 	.word	0x200042bc

08006780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d04c      	beq.n	800682c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006792:	2308      	movs	r3, #8
 8006794:	425b      	negs	r3, r3
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4413      	add	r3, r2
 800679a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	4b23      	ldr	r3, [pc, #140]	; (8006834 <vPortFree+0xb4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4013      	ands	r3, r2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10c      	bne.n	80067c8 <vPortFree+0x48>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	b672      	cpsid	i
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	b662      	cpsie	i
 80067c2:	60fb      	str	r3, [r7, #12]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00c      	beq.n	80067ea <vPortFree+0x6a>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	b672      	cpsid	i
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	b662      	cpsie	i
 80067e4:	60bb      	str	r3, [r7, #8]
}
 80067e6:	bf00      	nop
 80067e8:	e7fe      	b.n	80067e8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	4b11      	ldr	r3, [pc, #68]	; (8006834 <vPortFree+0xb4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4013      	ands	r3, r2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d019      	beq.n	800682c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d115      	bne.n	800682c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <vPortFree+0xb4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	43db      	mvns	r3, r3
 800680a:	401a      	ands	r2, r3
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006810:	f7ff f9f6 	bl	8005c00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	4b07      	ldr	r3, [pc, #28]	; (8006838 <vPortFree+0xb8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4413      	add	r3, r2
 800681e:	4a06      	ldr	r2, [pc, #24]	; (8006838 <vPortFree+0xb8>)
 8006820:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006822:	6938      	ldr	r0, [r7, #16]
 8006824:	f000 f86c 	bl	8006900 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006828:	f7ff f9f8 	bl	8005c1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800682c:	bf00      	nop
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	200042c0 	.word	0x200042c0
 8006838:	200042b8 	.word	0x200042b8

0800683c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006842:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006846:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006848:	4b27      	ldr	r3, [pc, #156]	; (80068e8 <prvHeapInit+0xac>)
 800684a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00c      	beq.n	8006870 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3307      	adds	r3, #7
 800685a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0307 	bic.w	r3, r3, #7
 8006862:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <prvHeapInit+0xac>)
 800686c:	4413      	add	r3, r2
 800686e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006874:	4a1d      	ldr	r2, [pc, #116]	; (80068ec <prvHeapInit+0xb0>)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800687a:	4b1c      	ldr	r3, [pc, #112]	; (80068ec <prvHeapInit+0xb0>)
 800687c:	2200      	movs	r2, #0
 800687e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	4413      	add	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006888:	2208      	movs	r2, #8
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1a9b      	subs	r3, r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0307 	bic.w	r3, r3, #7
 8006896:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4a15      	ldr	r2, [pc, #84]	; (80068f0 <prvHeapInit+0xb4>)
 800689c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800689e:	4b14      	ldr	r3, [pc, #80]	; (80068f0 <prvHeapInit+0xb4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2200      	movs	r2, #0
 80068a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068a6:	4b12      	ldr	r3, [pc, #72]	; (80068f0 <prvHeapInit+0xb4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	1ad2      	subs	r2, r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068bc:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <prvHeapInit+0xb4>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <prvHeapInit+0xb8>)
 80068ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	4a09      	ldr	r2, [pc, #36]	; (80068f8 <prvHeapInit+0xbc>)
 80068d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068d4:	4b09      	ldr	r3, [pc, #36]	; (80068fc <prvHeapInit+0xc0>)
 80068d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80068da:	601a      	str	r2, [r3, #0]
}
 80068dc:	bf00      	nop
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	200006ac 	.word	0x200006ac
 80068ec:	200042ac 	.word	0x200042ac
 80068f0:	200042b4 	.word	0x200042b4
 80068f4:	200042bc 	.word	0x200042bc
 80068f8:	200042b8 	.word	0x200042b8
 80068fc:	200042c0 	.word	0x200042c0

08006900 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006908:	4b28      	ldr	r3, [pc, #160]	; (80069ac <prvInsertBlockIntoFreeList+0xac>)
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	e002      	b.n	8006914 <prvInsertBlockIntoFreeList+0x14>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d8f7      	bhi.n	800690e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	4413      	add	r3, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	429a      	cmp	r2, r3
 800692e:	d108      	bne.n	8006942 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	441a      	add	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	441a      	add	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d118      	bne.n	8006988 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <prvInsertBlockIntoFreeList+0xb0>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d00d      	beq.n	800697e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	441a      	add	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	e008      	b.n	8006990 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800697e:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <prvInsertBlockIntoFreeList+0xb0>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	e003      	b.n	8006990 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d002      	beq.n	800699e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	200042ac 	.word	0x200042ac
 80069b0:	200042b4 	.word	0x200042b4

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	4d0d      	ldr	r5, [pc, #52]	; (80069ec <__libc_init_array+0x38>)
 80069b8:	4c0d      	ldr	r4, [pc, #52]	; (80069f0 <__libc_init_array+0x3c>)
 80069ba:	1b64      	subs	r4, r4, r5
 80069bc:	10a4      	asrs	r4, r4, #2
 80069be:	2600      	movs	r6, #0
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	4d0b      	ldr	r5, [pc, #44]	; (80069f4 <__libc_init_array+0x40>)
 80069c6:	4c0c      	ldr	r4, [pc, #48]	; (80069f8 <__libc_init_array+0x44>)
 80069c8:	f000 f820 	bl	8006a0c <_init>
 80069cc:	1b64      	subs	r4, r4, r5
 80069ce:	10a4      	asrs	r4, r4, #2
 80069d0:	2600      	movs	r6, #0
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	08006ab0 	.word	0x08006ab0
 80069f0:	08006ab0 	.word	0x08006ab0
 80069f4:	08006ab0 	.word	0x08006ab0
 80069f8:	08006ab4 	.word	0x08006ab4

080069fc <memset>:
 80069fc:	4402      	add	r2, r0
 80069fe:	4603      	mov	r3, r0
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d100      	bne.n	8006a06 <memset+0xa>
 8006a04:	4770      	bx	lr
 8006a06:	f803 1b01 	strb.w	r1, [r3], #1
 8006a0a:	e7f9      	b.n	8006a00 <memset+0x4>

08006a0c <_init>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	bf00      	nop
 8006a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a12:	bc08      	pop	{r3}
 8006a14:	469e      	mov	lr, r3
 8006a16:	4770      	bx	lr

08006a18 <_fini>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	bf00      	nop
 8006a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1e:	bc08      	pop	{r3}
 8006a20:	469e      	mov	lr, r3
 8006a22:	4770      	bx	lr
